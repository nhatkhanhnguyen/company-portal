@using MediatR
@using CompanyPortal.CQRS.Products.Commands
@using CompanyPortal.CQRS.Products.Queries
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor

@inject IJSRuntime Js

@page "/Administration/Products"
@inject IMediator Mediator

<h3>Products</h3>
<hr />

<SfGrid DataSource="@ListProduct" @ref="ProductGrid" ID="sfGridProduct"
        AllowPaging="true" AllowSelection="true"
        AllowSorting="true" AllowResizing="true"
        EnableStickyHeader="true" EnableHover="true"
        Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "Search" })"
        AllowExcelExport="true" AllowPdfExport="true">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridSearchSettings Fields="@(new[] { "Id", "Name", "Description", "Price" })"></GridSearchSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ProductViewModel">
    </GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(ProductViewModel.Id)" Width="64"
                    HeaderText="ID">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.Name)"
                    HeaderText="Name">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.Price)" Width="128"
                    HeaderText="Price"
                    Type="ColumnType.Decimal">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.DiscountedPrice)" Width="128"
                    HeaderText="Discounted Price"
                    Type="ColumnType.Decimal">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.PercentDiscount)" Width="128"
                    HeaderText="Discounted %"
                    Type="ColumnType.Decimal">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.Tags)"
                    HeaderText="Tags"
                    Type="ColumnType.String">
        </GridColumn>
        <GridColumn HeaderText="Active" TextAlign="TextAlign.Center" Width="100">
            <Template>
                @{
                    var product = context as ProductViewModel;
                    if (product!.IsActive)
                    {
                        <i class="fa-solid fa-check" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Active"></i>
                    }
                    else
                    {
                        <i class="fa-solid fa-xmark" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Inactive"></i>
                    }
                }

            </Template>
        </GridColumn>
        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Right">
            <Template>
                @{
                    var product = context as ProductViewModel;
                    <button class="btn btn-sm btn-info" @onclick="() => ShowProductViewDialog(product?.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Preview">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="() => ShowEditDialog(product?.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Edit">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteDialog(product?.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Delete">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                }

            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="row">
    <div class="col-12 mt-2">
        <button class="btn btn-primary float-end" @onclick="() => ShowEditDialog()">
            <i class="fa-solid fa-plus"></i>
        </button>
    </div>
</div>

<ModalDialog @ref="EditDialog" SizeClass="modal-xl" Title="@(EditingProduct.Id != 0 ? "Edit " + EditingProduct.Name : "New Product")">
    <Body>
        <EditForm Model="EditingProduct" OnValidSubmit="SaveAsync" id="FormProduct" class="row g-3">
            <FluentValidationValidator ValidatorType="typeof(ProductFormValidator)" />
            <div class="col-12">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="EditingProduct.Name" />
                <ValidationMessage For="@(() => EditingProduct.Name)" />
            </div>
            <div class="col-12">
                <SfRichTextEditor @ref="DescriptionEditor" @bind-Value="EditingProduct.Description" EnableHtmlEncode="true" Height="400">
                    <RichTextEditorToolbarSettings Items="@_descriptionEditorTools" />
                </SfRichTextEditor>
                <ValidationMessage For="@(() => EditingProduct.Description)" />
            </div>
            <div class="col-4">
                <label class="form-label">Price</label>
                <InputNumber @bind-Value="EditingProduct.Price" class="form-control" />
                <ValidationMessage For="@(() => EditingProduct.Price)" />
            </div>
            <div class="col-4">
                <label class="form-label">Discounted Price</label>
                <InputNumber @bind-Value="EditingProduct.DiscountedPrice" class="form-control" placeholder="1000" />
                <ValidationMessage For="@(() => EditingProduct.DiscountedPrice)" />
            </div>
            <div class="col-4">
                <label class="form-label">Discounted Percentage</label>
                <InputNumber @bind-Value="EditingProduct.PercentDiscount" class="form-control" placeholder="10%" />
                <ValidationMessage For="@(() => EditingProduct.PercentDiscount)" />
            </div>
            <div class="col-6">
                <label class="form-label">Tags</label>
                <InputText type="text" @bind-Value="EditingProduct.Tags" class="form-control" placeholder="airplane, car ..." />
            </div>
            <div class="col-6">
                <br />
                <div class="form-check float-end">
                    <InputCheckbox @bind-Value="EditingProduct.MarkedAsInactive" class="form-check-input" />
                    <label class="form-check-label">
                        Mark as inactive
                    </label>
                </div>
            </div>
            <div class="form-group col-12 control-section">
                <label class="col-form-label">Upload Image:</label>
                <SfUploader @ref="ImagesUploader" ID="UploadFiles" AllowedExtensions=".png,.jpeg,.jpg">
                    <UploaderEvents ValueChange="OnUploaderChange" OnRemove="OnFileRemove"></UploaderEvents>
                    <UploaderTemplates>
                        <Template Context="httpContext">
                            <table>
                                <tr>
                                    <td>
                                        <img class="upload-image" alt="Preview Image @(httpContext.Name)"
                                             src="@(files.Count >0 ? files.Where(item=>item.Name == httpContext.Name)?.FirstOrDefault()?.Path : string.Empty)">
                                    </td>
                                    <td>
                                        <div style="padding: 7px;">
                                            <h5 title="@(httpContext.Name)">@(httpContext.Name)</h5>
                                            <i>@(httpContext.Size) Bytes</i>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            <span class="e-icons e-file-remove-btn remove" id="removeIcon" title="Remove"></span>
                            <span class="e-upload-icon e-icons e-file-remove-btn" title="Upload" id="iconUpload" @onclick="@uploadFile"></span>
                        </Template>
                    </UploaderTemplates>
                </SfUploader>
            </div>
        </EditForm>
    </Body>
    <Footer>
        <button class="btn btn-primary float-end" type="submit" form="FormProduct">Save</button>
        <button class="btn btn-danger float-end me-2" @onclick="() => EditDialog.Close()">Close</button>
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ViewDialog" SizeClass="modal-xl" Title="Preview">
    <Body>
        <ProductView IsEditing="true" Product="@EditingProduct" />
    </Body>
</ModalDialog>

<ModalDialog @ref="@DeleteDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-triangle-exclamation"></i> Delete @EditingProduct.Name!
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => DeleteDialog.Close()"></button>
    </Header>
    <Body>
        <p>Are you sure you want to delete @EditingProduct.Name. This action can't be un-done.</p>
        <InputCheckbox @bind-Value="ForceDelete" /> Delete permanently
    </Body>
    <Footer>
        <button class="btn btn-danger float-end" @onclick="DeleteAsync">Yes</button>
        <button class="btn btn-primary float-end me-2" @onclick="() => DeleteDialog.Close()">No</button>
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ErrorDialog" Title="Error">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-circle-exclamation"></i> Error occured
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ErrorDialog.Close()"></button>
    </Header>
    <Body>
        <p>@ErrorMessage</p>
    </Body>
    <Footer>
        <button class="btn btn-primary float-middle" @onclick="() => ErrorDialog.Close()">OK</button>
    </Footer>
</ModalDialog>

<script>
    function addTooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    }
</script>

@code {
    private ModalDialog EditDialog { get; set; }
    private ModalDialog ViewDialog { get; set; }
    private ModalDialog DeleteDialog { get; set; }
    private ModalDialog ErrorDialog { get; set; }

    private SfGrid<ProductViewModel> ProductGrid { get; set; }
    private SfRichTextEditor DescriptionEditor { get; set; }
    private SfUploader ImagesUploader { get; set; }

    private IEnumerable<ProductViewModel> ListProduct { get; set; } = [];
    private ProductViewModel EditingProduct { get; set; } = new();
    private string ErrorMessage { get; set; } = "";
    private bool ForceDelete { get; set; }
    private List<FileInfo> _files = [];

    private readonly List<ToolbarItemModel> _descriptionEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
    new ToolbarItemModel { Command = ToolbarCommand.Italic },
    new ToolbarItemModel { Command = ToolbarCommand.Underline },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.Formats },
    new ToolbarItemModel { Command = ToolbarCommand.Alignments },
    new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
    new ToolbarItemModel { Command = ToolbarCommand.Image },
    new ToolbarItemModel { Command = ToolbarCommand.Video },
    new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
    new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    protected override async Task OnInitializedAsync()
    {
        ListProduct = await Mediator.Send(new GetAllProductsQuery());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("addTooltips");
    }

    private async Task ShowEditDialog(int? id = null)
    {
        EditingProduct = id != null ? ListProduct.First(x => x.Id == id) : new ProductViewModel();
        EditDialog.Open();
        await DescriptionEditor.RefreshUIAsync();
    }

    private void ShowProductViewDialog(int? id = null)
    {
        EditingProduct = id != null ? ListProduct.First(x => x.Id == id) : new ProductViewModel();
        ViewDialog.Open();
    }

    private void ShowDeleteDialog(int? id = null)
    {
        EditingProduct = id != null ? ListProduct.First(x => x.Id == id) : new ProductViewModel();
        if (id != null)
        {
            DeleteDialog.Open();
        }
    }

    private async Task SaveAsync()
    {
        var isUpdate = EditingProduct.Id > 0;
        EditingProduct.IsActive = !EditingProduct.MarkedAsInactive;
        var result = isUpdate
            ? await Mediator.Send(new UpdateProductCommand(EditingProduct))
            : await Mediator.Send(new CreateProductCommand(EditingProduct));
        if (result)
        {
            ListProduct = await Mediator.Send(new GetAllProductsQuery());
            await ProductGrid.Refresh();
            EditDialog.Close();
        }
        else
        {
            EditDialog.Close();
            var request = isUpdate ? "updating" : "creating";
            ErrorMessage = $"There is a problem while {request} product {EditingProduct.Name}.";
            ErrorDialog.Open();
        }
    }

    private async Task DeleteAsync()
    {
        var result = await Mediator.Send(new DeleteProductCommand(EditingProduct.Id, ForceDelete));
        if (result)
        {
            ListProduct = await Mediator.Send(new GetAllProductsQuery());
            await ProductGrid.Refresh();
            DeleteDialog.Close();
        }
        else
        {
            DeleteDialog.Close();
            ErrorMessage = $"There is a problem while deleting product {EditingProduct.Name}.";
            ErrorDialog.Open();
        }
    }

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // Id is combination of Grid's ID and itemname
            case "sfGridProduct_excelexport":
                await ProductGrid.ExportToExcelAsync();
                break;
            case "sfGridProduct_pdfexport":
                await ProductGrid.ExportToPdfAsync();
                break;
        }
    }

    private void OnUploaderChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            const string accountName = "***"; // Provide your accountName
            const string key = "***"; // Provide your account key
            var storageAccount = new CloudStorageAccount(new StorageCredentials(accountName, key), true);
            var blobClient = storageAccount.CreateCloudBlobClient();
            var container = blobClient.GetContainerReference("filo"); // Provide your container name
            await container.CreateIfNotExistsAsync();
            await container.SetPermissionsAsync(new BlobContainerPermissions()
                {
                    PublicAccess = BlobContainerPublicAccessType.Blob
                });
            var blob = container.GetBlockBlobReference(file.FileInfo.Name);
            await blob.UploadFromStreamAsync(file.Stream);
        }
    }
}