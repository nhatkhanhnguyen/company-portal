@using Syncfusion.Blazor.RichTextEditor
<ModalDialog @ref="Modal" SizeClass="modal-xl" TData="ProductViewModel">
    <Header>
        <h5 class="modal-title">@(Product.Id > 0 ? "Edit" : "Create")</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => Modal.Close()"></button>
    </Header>
    <Body>
        <EditForm Model="Product" OnValidSubmit="SaveAsync" id="FormProduct" class="row g-3">
            <FluentValidationValidator ValidatorType="typeof(ProductFormValidator)" />
            <div class="col-6">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="Product.Name" />
                <ValidationMessage For="@(() => Product.Name)" />
            </div>
            <div class="col-6">
                <label class="form-label">Tags</label>
                <InputText type="text" @bind-Value="Product.Tags" class="form-control" placeholder="airplane, car ..." />
            </div>
            <div class="col-6">
                <label class="form-label">Images</label>
                <SfUploader @ref="ImagesUploader" ID="UploadFiles" AllowedExtensions=".png,.jpeg,.jpg" AllowMultiple>
                    <UploaderEvents ValueChange="OnUploaderChange"></UploaderEvents>
                    <UploaderTemplates>
                        <Template Context="fileContext">
                            <table class="table mb-0 table-uploader-items">
                                <tbody class="align-middle">
                                    <tr>
                                        <td class="align-middle">
                                            <input type="hidden" />
                                            <img style="max-width: 200px" class="img-fluid rounded img-uploader-image-preview" alt="Preview Image @(fileContext.Name)"
                                                 src="@(Product.Images.Count > 0 ? Product.Images.FirstOrDefault(item => item.Name == fileContext.Name)?.Base64Content : string.Empty)">
                                        </td>
                                        <td class="align-middle">
                                            <span class="uploader-file-name">
                                                Name: @fileContext.Name
                                            </span>
                                            <br />
                                            <i>Size: @Math.Round(fileContext.Size / 1024 / 1024, 2) MB</i>
                                        </td>
                                        <td class="align-middle">
                                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveFile(fileContext)">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </Template>
                    </UploaderTemplates>
                </SfUploader>
                @if (_uploadingFiles.Count > 0)
                {
                    <button class="btn btn-sm btn-danger float-right mt-2" @onclick="ClearUploader">Clear</button>
                }
            </div>
            <div class="col-6">
                <label class="form-label">Description</label>
                <SfRichTextEditor @ref="DescriptionEditor" @bind-Value="Product.Description" EnableHtmlEncode="true" Height="400">
                    <RichTextEditorToolbarSettings Items="@_descriptionEditorTools" />
                </SfRichTextEditor>
                <ValidationMessage For="@(() => Product.Description)" />
            </div>
            <div class="col-3">
                <label class="form-label">Price</label>
                <InputNumber @bind-Value="Product.Price" class="form-control" />
                <ValidationMessage For="@(() => Product.Price)" />
            </div>
            <div class="col-3">
                <label class="form-label">Discounted Price</label>
                <InputNumber @bind-Value="Product.DiscountedPrice" class="form-control" placeholder="1000" />
                <ValidationMessage For="@(() => Product.DiscountedPrice)" />
            </div>
            <div class="col-3">
                <label class="form-label">Discounted Percentage</label>
                <InputNumber @bind-Value="Product.PercentDiscount" class="form-control" placeholder="10%" />
                <ValidationMessage For="@(() => Product.PercentDiscount)" />
            </div>

            <div class="col-3">
                <div class="form-check d-flex">
                    <InputCheckbox @bind-Value="Product.MarkedAsInactive" class="form-check-input align-self-baseline" />
                    <span class="form-check-label ms-2">
                        Mark as inactive. This will hide the product from user.
                    </span>
                </div>

            </div>

        </EditForm>
    </Body>
    <Footer>
        <button class="btn btn-primary float-end" type="submit" form="FormProduct">Save</button>
        <button class="btn btn-danger float-end me-2" @onclick="() => Modal.Close()">Close</button>
    </Footer>
</ModalDialog>

@code {
    [Parameter] public ProductViewModel Product { get; set; }

    private SfUploader? ImagesUploader { get; set; }
    private SfRichTextEditor? DescriptionEditor { get; set; }
    private ModalDialog? Modal { get; set; }

    private List<ResourceViewModel> _uploadingFiles = [];

    private readonly List<ToolbarItemModel> _descriptionEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
        new ToolbarItemModel { Command = ToolbarCommand.Italic },
        new ToolbarItemModel { Command = ToolbarCommand.Underline },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Formats },
        new ToolbarItemModel { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel { Command = ToolbarCommand.Image },
        new ToolbarItemModel { Command = ToolbarCommand.Video },
        new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    private async Task OnUploaderChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var stream = new MemoryStream();
            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(stream);
            var base64 = Convert.ToBase64String(stream.ToArray());
            Product.Images.Add(new ResourceViewModel
            {
                Base64Content = @"data:image/" + file.FileInfo.Type + ";base64," + base64,
                Name = file.FileInfo.Name,
                Size = file.FileInfo.Size,
                Status = UploadFileStatus.New
            });
        }
    }

    private async Task RemoveFile(FileInfo file)
    {
        Product.Images.RemoveAt(Product.Images.FindIndex(x => x.Name == file.Name));
        await ImagesUploader.RemoveAsync([file]);
    }

    private async Task ClearUploader()
    {
        Product.Images.RemoveAll(x => x.Status == UploadFileStatus.New);
        await ImagesUploader.ClearAllAsync();
    }

    private void SaveAsync() {}
}