@using CompanyPortal.CQRS.Categories.Queries
@using Syncfusion.Blazor.RichTextEditor

<EditForm Model="Product" OnValidSubmit="InsertOrUpdateAsync" id="FormProduct" class="row g-3">
    <div class="col-6">
        <Label For="@(() => Product.Images)" CssClass="form-label"></Label>
        <FileUploader Files="Product.Images" ButtonText="Chọn ảnh" Id="fileUploader" AcceptFileExtensions=".jpg,.png" AllowMultiple="true" ShowPreview></FileUploader>
    </div>
    <fieldset class="col-6" disabled="@_isLoading">
        <FluentValidationValidator ValidatorType="typeof(ProductFormValidator)" />
        <div class="row">
            <div class="col-12 mb-3">
                <Label For="@(() => Product.Name)" CssClass="form-label"></Label>
                <InputText class="form-control" @bind-Value="Product.Name" />
                <ValidationMessage For="@(() => Product.Name)" />
            </div>
            <div class="col-6 mb-3">
                <Label For="@(() => Product.CategoryId)" CssClass="form-label"></Label>
                <SfComboBox TValue="int" TItem="CategoryViewModel" @bind-Value="Product.CategoryId" class="form-control" DataSource="Categories">
                    <ComboBoxFieldSettings Value="Id" Text="Name"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => Product.CategoryId)" />
            </div>
            <div class="col-6 mb-3">
                <Label For="@(() => Product.ExternalId)" CssClass="form-label"></Label>
                <div class="input-group mb-3">
                    <InputText class="form-control" @bind-Value="Product.ExternalId" disabled="@(_isLoading || Product.AutoGenerateExternalId)" />
                    <div class="input-group-text">
                        <InputCheckbox class="form-check-input me-2" @bind-Value="Product.AutoGenerateExternalId" />
                        <Label For="@(() => Product.AutoGenerateExternalId)" CssClass="form-check-label"></Label>
                    </div>
                </div>
                <ValidationMessage For="@(() => Product.Name)" />
            </div>
            <div class="col-12 mb-3">
                <Label For="@(() => Product.Tags)" CssClass="form-label"></Label>
                <InputText type="text" @bind-Value="Product.Tags" class="form-control" placeholder="airplane car ..." />
            </div>
            <div class="col-12 mb-3">
                <Label For="@(() => Product.Description)" CssClass="form-label"></Label>
                <SfRichTextEditor ID="descriptionEditor" @bind-Value="Product.Description" Height="400" Enabled="!_isLoading">
                    <RichTextEditorToolbarSettings Items="@_descriptionEditorTools" />
                </SfRichTextEditor>
                <ValidationMessage For="@(() => Product.Description)" />
            </div>
            <div class="col-12 mb-3">
                <Label For="@(() => Product.Price)" CssClass="form-label"></Label>
                <InputNumber @bind-Value="Product.Price" class="form-control" />
                <ValidationMessage For="@(() => Product.Price)" />
            </div>
            <div class="col-12">
                <div class="form-check d-flex">
                    <InputCheckbox @bind-Value="Product.MarkedAsInactive" class="form-check-input align-self-baseline" />
                    <span class="form-check-label ms-2">
                        <Label For="@(() => Product.MarkedAsInactive)" CssClass="form-label"></Label>
                    </span>
                </div>
            </div>
        </div>
    </fieldset>
</EditForm>

<hr />
<div class="row">
    <div class="col-12 d-flex justify-content-end">
        <LoadingButton Type="submit" IconCss="fa-solid fa-floppy-disk" ForForm="FormProduct" ButtonCssClass="btn-primary rounded-pill me-2" IsLoading="_isLoading" 
            LoadingText="ĐANG LƯU" NormalText="LƯU" OnClick="InsertOrUpdateAsync" />
        <button type="button" class="btn btn-danger rounded-pill" @onclick="CancelAsync"><i class="fa-solid fa-xmark"></i> HỦY</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public ProductViewModel Product { get; set; } = new();
    [Parameter] public List<CategoryViewModel> Categories{ get; set; } = [];
    private bool _isLoading = false;

    private readonly List<ToolbarItemModel> _descriptionEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
        new ToolbarItemModel { Command = ToolbarCommand.Italic },
        new ToolbarItemModel { Command = ToolbarCommand.Underline },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Formats },
        new ToolbarItemModel { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel { Command = ToolbarCommand.Image },
        new ToolbarItemModel { Command = ToolbarCommand.Video },
        new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];


    private async Task CancelAsync() => await BlazoredModal.CancelAsync();
    
    private async Task InsertOrUpdateAsync()
    {
        _isLoading = true;
        Product.IsActive = !Product.MarkedAsInactive;
        await BlazoredModal.CloseAsync(ModalResult.Ok<ProductViewModel>(Product));
        _isLoading = false;
    }
}