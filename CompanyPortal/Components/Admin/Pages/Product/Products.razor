@rendermode @(new InteractiveServerRenderMode(prerender:false))
@using CompanyPortal.Core.Enums
@using MediatR
@using CompanyPortal.CQRS.Products.Queries
@using CompanyPortal.Core.Extensions
@using CompanyPortal.CQRS.Products.Commands
@using CompanyPortal.CQRS.Resources.Commands
@using CompanyPortal.CQRS.Categories.Queries

@page "/Administration/Products"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>SẢN PHẨM</h2>
        <button class="btn btn-lg btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(null)">
            <i class="fa-solid fa-circle-plus"></i> THÊM
        </button>
    </div>
</div>
<hr />
@if (_isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listProduct" @ref="ProductGrid" ID="sfGridProduct"
            AllowPaging="true" AllowSelection="true"
            AllowSorting="true" AllowResizing="true"
            EnableStickyHeader="true" EnableHover="true"
            Toolbar="_toolbarItems"
            AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Id", "ExternalId", "Name", "ShortDescription", "Price", "Tags" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandlerAsync" TValue="ProductViewModel">
        </GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(ProductViewModel.Id)" HeaderText="ID" Width="50"></GridColumn>
            <GridColumn Field="@nameof(ProductViewModel.ExternalId)" HeaderText="MÃ" Width="128"></GridColumn>
            <GridColumn Field="@nameof(ProductViewModel.Name)" HeaderText="TÊN" Width="386" Type="ColumnType.String"></GridColumn>
            <GridColumn Field="@nameof(ProductViewModel.CategoryName)" HeaderText="DANH MỤC" Width="128" Type="ColumnType.String"></GridColumn>
            <GridColumn Field="@nameof(ProductViewModel.Price)" Width="128" HeaderText="GIÁ" Format="#,#00đ" Type="ColumnType.Decimal"></GridColumn>
            <GridColumn HeaderText="TAGS">
                <Template>
                    @{
                        var product = context as ProductViewModel;
                        foreach (var tag in product!.Tags.Split(' '))
                        {
                            <span class="badge rounded-pill text-bg-info me-1">@tag</span>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
                <Template>
                    @{
                        var product = context as ProductViewModel;
                        if (!product!.IsActive)
                        {
                            <i class="fa-solid fa-check" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Hiện"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var product = context as ProductViewModel;
                        <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialogAsync(product!)">
                            <i class="fa-solid fa-eye"></i> XEM
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(product)">
                            <i class="fa-solid fa-pen-to-square"></i> SỬA
                        </button>
                        <button class="btn btn-sm btn-danger rounded-pill" @onclick="() => ShowDeleteDialogAsync(product!)">
                            <i class="fa-solid fa-trash"></i> XÓA
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<ProductViewModel> ProductGrid { get; set; } = default!;
    private List<ProductViewModel> _listProduct = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridProduct");
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
        _isLoading = false;
    }

    private async Task ShowEditDialogAsync(ProductViewModel? selectedProduct)
    {
        var product = selectedProduct != null ? selectedProduct.Clone()! : new ProductViewModel();
        var categories = await Mediator.Send(new GetAllCategoriesQuery());

        var parameters = new ModalParameters()
            .Add("categories", categories)
            .Add("product", product);
        var modalResult = await Modal.Show<EditProductDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;

        if (modalResult.Confirmed)
        {
            _isLoading = true;
            var result = selectedProduct != null
                ? await UpdateProductAsync((ProductViewModel)modalResult.Data!)
                : await CreateProductAsync((ProductViewModel)modalResult.Data!);
            if (result)
            {
                _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters()
                    .Add("ErrorMessage", "Có lỗi xảy ra khi lưu sản phẩm. Vui lòng thử lại sau!"));
            }
            _isLoading = false;
        }
    }

    private async Task ShowViewDialogAsync(ProductViewModel selectedProduct)
    {
        var images = await Mediator.Send(new GetProductImagesByIdQuery(selectedProduct.Id, true));
        selectedProduct.Images = images;
        var parameters = new ModalParameters()
            .Add("Product", selectedProduct);
        Modal.Show<ViewProductDialog>(parameters, new ModalOptions { UseCustomLayout = true });
    }

    private async Task ShowDeleteDialogAsync(ProductViewModel selectedProduct)
    {
        var parameters = new ModalParameters()
            .Add("Name", selectedProduct.Name)
            .Add("ExternalId", selectedProduct.ExternalId);
        var modalResult = await Modal.Show<DeleteProductDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var forceDelete = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteProductCommand(selectedProduct.Id, forceDelete));
            if (result.IsSuccess)
            {
                await Mediator.Send(new DeleteResourcesByExpressionCommand(x => x.ProductId == selectedProduct.Id, forceDelete));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters()
                    .Add("ErrorMessage", result.Data as string));
            }
            _isLoading = true;
            _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
            _isLoading = false;
        }
    }

    private async Task ToolbarClickHandlerAsync(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "sfGridProduct_excelexport":
                await ProductGrid.ExportToExcelAsync();
                break;
            case "sfGridProduct_pdfexport":
                await ProductGrid.ExportToPdfAsync();
                break;
        }
    }

    private async Task<bool> UpdateProductAsync(ProductViewModel product)
    {
        var result = await Mediator.Send(new UpdateProductCommand(product));
        if (result.IsSuccess)
        {
            await DeleteProductImagesAsync(product.Images.Where(x => x.Status == UploadFileStatus.Removed).ToList(), true);
            await CreateProductImagesAsync((int)result.Data!, product.Images.Where(x => x.Status == UploadFileStatus.New).ToList());
        }

        return result.IsSuccess;
    }

    private async Task<bool> CreateProductAsync(ProductViewModel product)
    {
        var result = await Mediator.Send(new CreateProductCommand(product));
        if (result.IsSuccess)
        {
            await CreateProductImagesAsync((int)result.Data!, product.Images);
        }

        return result.IsSuccess;
    }

    private Task CreateProductImagesAsync(int productId, List<ResourceViewModel> newImages)
    {
        foreach (var image in newImages)
        {
            image.ProductId = productId;
            image.ResourceType = ResourceType.Image;
        }

        return Mediator.Send(new CreateResourcesCommand(newImages));
    }

    private Task DeleteProductImagesAsync(List<ResourceViewModel> images, bool forceDelete = false)
    {
        return Mediator.Send(new DeleteResourcesCommand(images.Select(x => x.Id).ToList(), forceDelete));
    }
}