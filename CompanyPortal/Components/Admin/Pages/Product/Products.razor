@using MediatR
@using CompanyPortal.CQRS.Products.Commands
@using CompanyPortal.CQRS.Products.Queries
@using CompanyPortal.CQRS.Resources.Commands
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor
@using CompanyPortal.Core.Extensions
@using CompanyPortal.Core.Enum
@using CompanyPortal.CQRS.Categories.Queries

@inject IJSRuntime Js

@page "/Administration/Products"
@inject IMediator Mediator

<h3>Products</h3>
<hr />

<SfGrid DataSource="@_listProduct" @ref="ProductGrid" ID="sfGridProduct"
        AllowPaging="true" AllowSelection="true"
        AllowSorting="true" AllowResizing="true"
        EnableStickyHeader="true" EnableHover="true"
        Toolbar="_toolbarItems"
        AllowExcelExport="true" AllowPdfExport="true">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridSearchSettings Fields="@(new[] { "Name", "Description", "Price", "Tags" })"></GridSearchSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ProductViewModel">
    </GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(ProductViewModel.ExternalId)"
                    HeaderText="MÃ SẢN PHẨM"
                    Width="128">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.Name)"
                    HeaderText="TÊN SẢN PHẨM"
                    Width="486"
                    Type="ColumnType.String">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.CategoryName)"
                    HeaderText="DANH MỤC"
                    Width="128"
                    Type="ColumnType.String">
        </GridColumn>
        <GridColumn Field="@nameof(ProductViewModel.Price)" Width="156"
                    HeaderText="GIÁ"
                    Format="#,#00đ"
                    Type="ColumnType.Decimal">
        </GridColumn>
        <GridColumn HeaderText="TAGS">
            <Template>
                @{
                    var product = context as ProductViewModel;
                    foreach (var tag in product!.Tags.Split(' '))
                    {
                        <span class="badge rounded-pill text-bg-info me-1">@tag</span>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
            <Template>
                @{
                    var product = context as ProductViewModel;
                    if (!product!.IsActive)
                    {
                        <i class="fa-solid fa-check" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Hiện"></i>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                @{
                    var product = context as ProductViewModel;
                    <button class="btn btn-sm btn-info" @onclick="() => ShowViewDialogAsync(product!.Id)">
                        <i class="fa-solid fa-eye"></i> XEM
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="() => ShowEditDialogAsync(product!.Id)">
                        <i class="fa-solid fa-pen-to-square"></i> SỬA
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteDialog(product!.Id)">
                        <i class="fa-solid fa-trash"></i> XÓA
                    </button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="row">
    <div class="col-12 mt-2">
        <button class="btn btn-primary float-end" @onclick="() => ShowEditDialogAsync()">
            <i class="fa-solid fa-plus"></i> THÊM SẢN PHẨM
        </button>
    </div>
</div>

<ModalDialog @ref="EditDialog" SizeClass="modal-xxl">
    <Header>
        <h5 class="modal-title">@(_selectedProduct.Id > 0 ? "Edit" : "Create")</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => EditDialog.Close()"></button>
    </Header>
    <Body>
        <EditForm Model="_selectedProduct" OnValidSubmit="InsertOrUpdateAsync" id="FormProduct" class="row g-3">
            <div class="col-6">
                <Label For="@(() => _selectedProduct.Images)" CssClass="form-label"></Label>
                <FileUploader Files="_selectedProduct.Images" ButtonText="Chọn ảnh" Id="fileUploader" AcceptFileExtensions=".jpg,.png" AllowMultiple="true" ShowPreview></FileUploader>
            </div>
            <fieldset class="col-6" disabled="@_isLoading">
                <FluentValidationValidator ValidatorType="typeof(ProductFormValidator)" />
                <div class="row">
                    <div class="col-12 mb-3">
                        <Label For="@(() => _selectedProduct.Name)" CssClass="form-label"></Label>
                        <InputText class="form-control" @bind-Value="_selectedProduct.Name" />
                        <ValidationMessage For="@(() => _selectedProduct.Name)" />
                    </div>
                    <div class="col-6 mb-3">
                        <Label For="@(() => _selectedProduct.CategoryId)" CssClass="form-label"></Label>
                        <SfComboBox TValue="int" TItem="CategoryViewModel" @bind-Value="_selectedProduct.CategoryId" class="form-control" DataSource="_listCategory">
                            <ComboBoxFieldSettings Value="Id" Text="Name"></ComboBoxFieldSettings>
                        </SfComboBox>
                        <ValidationMessage For="@(() => _selectedProduct.CategoryId)" />
                    </div>
                    <div class="col-6 mb-3">
                        <Label For="@(() => _selectedProduct.ExternalId)" CssClass="form-label"></Label>
                        <div class="input-group mb-3">
                            <InputText class="form-control" @bind-Value="_selectedProduct.ExternalId" disabled="@(_isLoading || _selectedProduct.AutoGenerateExternalId)" />
                            <div class="input-group-text">
                                <InputCheckbox class="form-check-input me-2" Value="_selectedProduct.AutoGenerateExternalId" />
                                <Label For="@(() => _selectedProduct.AutoGenerateExternalId)" CssClass="form-check-label"></Label>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => _selectedProduct.Name)" />
                    </div>

                    <div class="col-12 mb-3">
                        <Label For="@(() => _selectedProduct.Tags)" CssClass="form-label"></Label>
                        <InputText type="text" @bind-Value="_selectedProduct.Tags" class="form-control" placeholder="airplane car ..." />
                    </div>
                    <div class="col-12 mb-3">
                        <Label For="@(() => _selectedProduct.Description)" CssClass="form-label"></Label>
                        <SfRichTextEditor ID="descriptionEditor" @bind-Value="_selectedProduct.Description" Height="400" Enabled="!_isLoading">
                            <RichTextEditorToolbarSettings Items="@_descriptionEditorTools" />
                        </SfRichTextEditor>
                        <ValidationMessage For="@(() => _selectedProduct.Description)" />
                    </div>
                    <div class="col-12 mb-3">
                        <Label For="@(() => _selectedProduct.Price)" CssClass="form-label"></Label>
                        <InputNumber @bind-Value="_selectedProduct.Price" class="form-control" />
                        <ValidationMessage For="@(() => _selectedProduct.Price)" />
                    </div>
                    <div class="col-12">
                        <div class="form-check d-flex">
                            <InputCheckbox @bind-Value="_selectedProduct.MarkedAsInactive" class="form-check-input align-self-baseline" />
                            <span class="form-check-label ms-2">
                                <Label For="@(() => _selectedProduct.MarkedAsInactive)" CssClass="form-label"></Label>
                            </span>
                        </div>
                    </div>
                </div>
            </fieldset>
        </EditForm>
    </Body>
    <Footer>
        <button type="button" class=" btn btn-danger float-end me-2" @onclick="() => EditDialog.Close()">Close</button>
        <LoadingButton Type="submit" ForForm="FormProduct" ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Saving" NormalText="Save" />
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ViewDialog" SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">Preview</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => ViewDialog.Close()"></button>
    </Header>
    <Body>
        <ProductView IsEditing="true" Product="@_selectedProduct" />
    </Body>
</ModalDialog>

<ModalDialog @ref="@DeleteDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-triangle-exclamation"></i> Delete @_selectedProduct.Name!
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => DeleteDialog.Close()"></button>
    </Header>
    <Body>
        <p>Are you sure you want to delete @_selectedProduct.Name. This action can't be un-done.</p>
        <InputCheckbox @bind-Value="_forceDelete" /> Delete permanently
    </Body>
    <Footer>
        <LoadingButton ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Deleting" NormalText="Yes" @onclick="() => DeleteAsync(_forceDelete)" />
        <button class="btn btn-primary float-end me-2" @onclick="() => DeleteDialog.Close()">No</button>
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ErrorDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-circle-exclamation"></i> Error occured
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ErrorDialog.Close()"></button>
    </Header>
    <Body>
        <p>@_errorMessage</p>
    </Body>
    <Footer>
        <button class="btn btn-primary float-middle" @onclick="() => ErrorDialog.Close()">OK</button>
    </Footer>
</ModalDialog>

<script>
    function addTooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    }
</script>

<style>
    .validation-message {
        font-size: .875em;
        color: red;
    }
</style>

@code {
    private ModalDialog EditDialog { get; set; } = default!;
    private ModalDialog ViewDialog { get; set; } = default!;
    private ModalDialog DeleteDialog { get; set; } = default!;
    private ModalDialog ErrorDialog { get; set; } = default!;
    private SfGrid<ProductViewModel> ProductGrid { get; set; } = default!;

    private List<ProductViewModel> _listProduct = [];
    private List<CategoryViewModel> _listCategory = [];
    private string _errorMessage = "";
    private bool _forceDelete;
    private ProductViewModel _selectedProduct = new();
    private List<ResourceViewModel> _originalProductImages = [];
    private bool _isLoading;

    private readonly List<ItemModel> _toolbarItems = [
        new ItemModel { Text = "Xuất Excel", Id = "sfGridProduct_excelexport", PrefixIcon = "fa-solid fa-file-excel" },
    new ItemModel { Text = "Xuất PDF", Id = "sfGridProduct_pdfexport", PrefixIcon = "fa-solid fa-file-pdf" }
    ];

    private readonly List<ToolbarItemModel> _descriptionEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
    new ToolbarItemModel { Command = ToolbarCommand.Italic },
    new ToolbarItemModel { Command = ToolbarCommand.Underline },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.Formats },
    new ToolbarItemModel { Command = ToolbarCommand.Alignments },
    new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
    new ToolbarItemModel { Command = ToolbarCommand.Image },
    new ToolbarItemModel { Command = ToolbarCommand.Video },
    new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
    new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;
        _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
        _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("addTooltips");
    }

    private async Task ShowEditDialogAsync(int? id = null)
    {
        _selectedProduct = id != null ? _listProduct.First(x => x.Id == id).Clone() : new ProductViewModel();
        _selectedProduct.Images = [];
        if (id != null)
        {
            var images = await Mediator.Send(new GetProductImagesByIdQuery(id.Value, true));
            _selectedProduct.Images = [.. images];
            _originalProductImages = images;
        }
        EditDialog.Open();
    }

    private async Task ShowViewDialogAsync(int id)
    {
        _selectedProduct = _listProduct.First(x => x.Id == id);
        var images = await Mediator.Send(new GetProductImagesByIdQuery(id, true));
        _selectedProduct.Images = images;
        ViewDialog.Open();
    }

    private void ShowDeleteDialog(int id)
    {
        _selectedProduct = _listProduct.First(x => x.Id == id);
        DeleteDialog.Open();
    }

    // Data

    private async Task InsertOrUpdateAsync()
    {
        _isLoading = true;
        var product = _selectedProduct.Clone();
        product.IsActive = !_selectedProduct.MarkedAsInactive;
        var productId = _selectedProduct.Id > 0 ? await UpdateProductAsync(product) : await CreateProductAsync(product);

        if (productId <= 0)
        {
            var request = _selectedProduct.Id > 0 ? "updating" : "creating";
            _errorMessage = $"There is a problem while {request} product {_selectedProduct.Name}.";
            ErrorDialog.Open();
        }
        EditDialog.Close();
        _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
        _isLoading = false;
    }

    private async Task DeleteAsync(bool forceDelete)
    {
        _isLoading = true;
        var result = await Mediator.Send(new DeleteProductCommand(_selectedProduct.Id, forceDelete));
        if (!result)
        {
            _errorMessage = $"There is a problem while deleting product {_selectedProduct.Name}.";
            ErrorDialog.Open();
        }
        _listProduct = await Mediator.Send(new GetAllProductsQuery(true));
        DeleteDialog.Close();
        _isLoading = false;
    }

    // Events

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // ProductId is combination of Grid's ID and itemname
            case "sfGridProduct_excelexport":
                await ProductGrid.ExportToExcelAsync();
                break;
            case "sfGridProduct_pdfexport":
                await ProductGrid.ExportToPdfAsync();
                break;
        }
    }

    private async Task<int> UpdateProductAsync(ProductViewModel product)
    {
        var productId = await Mediator.Send(new UpdateProductCommand(product));
        if (productId > 0)
        {
            var removedOldImages = GetRemovedOldImages(_originalProductImages, product.Images.Where(x => x.Status == UploadFileStatus.Old));
            await DeleteProductImagesAsync(removedOldImages, true);
            await CreateProductImagesAsync(productId, product.Images.Where(x => x.Status == UploadFileStatus.New));
        }

        return productId;
    }

    private async Task<int> CreateProductAsync(ProductViewModel product)
    {
        var productId = await Mediator.Send(new CreateProductCommand(product));
        if (productId > 0)
        {
            await CreateProductImagesAsync(productId, product.Images);
        }

        return productId;
    }

    private async Task CreateProductImagesAsync(int productId, IEnumerable<ResourceViewModel> newImages)
    {
        foreach (var image in newImages)
        {
            var imageUploadResult = await Mediator.Send(new UploadToStorageCommand(image));
            image.Url = imageUploadResult.Url;
            image.BlobName = imageUploadResult.BlobName;
            image.ProductId = productId;
            image.ResourceType = ResourceType.Image;
            await Mediator.Send(new CreateResourceCommand(image));
        }
    }

    private async Task DeleteProductImagesAsync(List<ResourceViewModel> images, bool forceDelete = false)
    {
        var result = await Mediator.Send(new DeleteResourcesCommand(images.Select(x => x.Id), forceDelete));
        if (result && forceDelete)
        {
            await Mediator.Send(new DeleteFromStorageCommand(images.Select(x => x.BlobName)));
        }
    }

    private List<ResourceViewModel> GetRemovedOldImages(IEnumerable<ResourceViewModel> originalOldImages, IEnumerable<ResourceViewModel> newOldImages)
    {
        return originalOldImages.Where(p => newOldImages.All(p2 => p2.Id != p.Id)).ToList();
    }
}