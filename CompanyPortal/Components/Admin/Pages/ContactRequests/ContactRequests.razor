@using CompanyPortal.CQRS.ContactRequests.Commands
@using CompanyPortal.CQRS.ContactRequests.Queries
@using CompanyPortal.CQRS.Email
@using MediatR

@page "/Administration/ContactRequests"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>YÊU CẦU LIÊN HỆ</h2>
    </div>
</div>
<hr />
@if (_isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listRequest" @ref="RequestGrid" ID="sfGridRequest"
            AllowPaging="true" AllowSelection="true"
            AllowSorting="true" AllowResizing="true"
            EnableStickyHeader="true" EnableHover="true"
            Toolbar="_toolbarItems"
            AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Name", "Description", "Price", "Tags" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandlerAsync" TValue="ContactRequestViewModel">
        </GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(ContactRequestViewModel.Id)"
                        HeaderText="ID"
                        Width="50">
            </GridColumn>
            <GridColumn Field="@nameof(ContactRequestViewModel.Fullname)"
                        HeaderText="NGƯỜI GỬI"
                        Width="386"
                        Type="ColumnType.String">
            </GridColumn>
            <GridColumn Field="@nameof(ContactRequestViewModel.DateCreated)"
                        HeaderText="NGÀY GỬI"
                        Width="128"
                        Type="ColumnType.DateTime">
            </GridColumn>
            <GridColumn Field="@nameof(ContactRequestViewModel.Title)"
                        HeaderText="TIÊU ĐỀ"
                        Width="386"
                        Type="ColumnType.String">
            </GridColumn>
            <GridColumn HeaderText="ĐÃ ĐỌC" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        if (!request!.IsRead)
                        {
                            <i class="fa-solid fa-check"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="ĐÃ TRẢ LỜI" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        if (!request!.IsResponsed)
                        {
                            <i class="fa-solid fa-check"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialog(request!)">
                            <i class="fa-solid fa-eye"></i> XEM
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => MarkAsRead(request!)">
                            <i class="fa-solid fa-pen-to-square"></i> ĐÃ ĐỌC
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => ShowResponseDialogAsync(request!)">
                            <i class="fa-solid fa-pen-to-square"></i> TRẢ LỜI
                        </button>
                        <button class="btn btn-sm btn-danger rounded-pill" @onclick="() => ShowDeleteDialogAsync(request!)">
                            <i class="fa-solid fa-trash"></i> XÓA
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code
{
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<ContactRequestViewModel> RequestGrid { get; set; } = default!;
    private List<ContactRequestViewModel> _listRequest = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridRequest");
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
        _isLoading = false;
    }

    private void ShowViewDialog(ContactRequestViewModel selectedRequest)
    {
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        Modal.Show<ViewContactRequestDialog>(parameters, new ModalOptions { UseCustomLayout = true });
    }

    private async Task ShowResponseDialogAsync(ContactRequestViewModel selectedRequest)
    {
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        var modalResult = await Modal.Show<ResponseDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var result = modalResult.Data as ContactResponseViewModel;
            await Mediator.Send(new SendEmailCommand("", "", "", result!.ResponseMessage));
        }
    }

    private async void MarkAsRead(ContactRequestViewModel selectedRequest)
    {
        var parameters = new ModalParameters().Add("Fullname", selectedRequest.Fullname);
        var modalResult = await Modal.Show<MarkAsReadDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var result = await Mediator.Send(new MarkRequestAsReadCommand(selectedRequest.Id));
            if (result.IsSuccess)
            {
                _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", result.Data as string));
            }
        }
    }

    private async Task ShowDeleteDialogAsync(ContactRequestViewModel selectedRequest)
    {
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        var modalResult = await Modal.Show<DeleteRequestDialog>("XÓA YÊU CẦU", parameters).Result;
        if (modalResult.Confirmed)
        {
            var data = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteContactRequestCommand(selectedRequest.Id, data));
            if (result.IsError)
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", result.Data as string));
            }
        }
        _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
    }

    private async Task ToolbarClickHandlerAsync(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "sfGridRequest_excelexport":
                await RequestGrid.ExportToExcelAsync();
                break;
            case "sfGridRequest_pdfexport":
                await RequestGrid.ExportToPdfAsync();
                break;
        }
    }
}

