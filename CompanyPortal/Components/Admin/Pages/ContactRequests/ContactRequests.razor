@using CompanyPortal.CQRS.ContactRequests.Commands
@using CompanyPortal.CQRS.ContactRequests.Queries
@using CompanyPortal.Core.Extensions
@using MediatR
@using Syncfusion.Blazor.Navigations

@page "/Administration/ContactRequests"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>YÊU CẦU LIÊN HỆ</h2>
    </div>
</div>
<hr />
@if (_listRequest.Count == 0 || _isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listRequest" @ref="RequestGrid" ID="sfGridRequest"
    AllowPaging="true" AllowSelection="true"
    AllowSorting="true" AllowResizing="true"
    EnableStickyHeader="true" EnableHover="true"
    Toolbar="_toolbarItems"
    AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Name", "Description", "Price", "Tags" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ContactRequestViewModel">
        </GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(ContactRequestViewModel.Id)"
            HeaderText="ID"
            Width="50">
            </GridColumn>
            <GridColumn Field="@nameof(ContactRequestViewModel.Fullname)"
            HeaderText="TÊN"
            Width="386"
            Type="ColumnType.String">
            </GridColumn>
            <GridColumn Field="@nameof(ContactRequestViewModel.DateCreated)"
            HeaderText="NGÀY GỬI"
            Width="128"
            Type="ColumnType.DateTime">
            </GridColumn>
            <GridColumn HeaderText="ĐÃ ĐỌC" TextAlign="TextAlign.Center" Width="50">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        if (!request!.IsRead)
                        {
                            <i class="fa-solid fa-check"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="ĐÃ TRẢ LỜI" TextAlign="TextAlign.Center" Width="50">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        if (!request!.IsResponsed)
                        {
                            <i class="fa-solid fa-check"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var request = context as ContactRequestViewModel;
                        <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialog(request!)">
                            <i class="fa-solid fa-eye"></i> XEM
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => MarkAsRead(request!)">
                            <i class="fa-solid fa-pen-to-square"></i> ĐÃ ĐỌC
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => ShowResponseDialog(request!)">
                            <i class="fa-solid fa-pen-to-square"></i> TRẢ LỜI
                        </button>
                        <button class="btn btn-sm btn-danger rounded-pill" @onclick="() => ShowDeleteDialogAsync(request!)">
                            <i class="fa-solid fa-trash"></i> XÓA
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code
{
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<ContactRequestViewModel> RequestGrid { get; set; } = default!;
    private List<ContactRequestViewModel> _listRequest = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridRequest");
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
    }

    private void ShowViewDialog(ContactRequestViewModel selectedRequest)
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-xlarge"
            };
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        Modal.Show<ViewContactRequestDialog>("THÔNG TIN SẢN PHẨM", parameters, options);
    }

    private void ShowResponseDialog(ContactRequestViewModel selectedRequest)
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-xlarge"
            };
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        Modal.Show<ResponseDialog>("TRẢ LỜI YÊU CẦU", parameters, options);
    }

    private async void MarkAsRead(ContactRequestViewModel selectedRequest)
    {
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-xlarge"
            };
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        var modalResult = await Modal.Show<ViewContactRequestDialog>("CHI TIẾT YÊU CẦU", parameters, options).Result;
        if (modalResult.Confirmed)
        {
            var result = await Mediator.Send(new MarkRequestAsReadCommand(selectedRequest.Id));
            if (result.IsSuccess)
            {
                _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi lưu danh mục!"));
            }
        }
    }

    private async Task ShowDeleteDialogAsync(ContactRequestViewModel selectedRequest)
    {
        var parameters = new ModalParameters().Add("Request", selectedRequest);
        var modalResult = await Modal.Show<DeleteRequestDialog>("XÓA YÊU CẦU", parameters).Result;
        if (modalResult.Confirmed)
        {
            var data = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteContactRequestCommand(selectedRequest.Id, data));
            if (!result)
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi xóa yêu cầu. Vui lòng thử lại sau!"));
            }
        }
        _listRequest = await Mediator.Send(new GetAllContactRequestsQuery(true));
    }

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "sfGridRequest_excelexport":
                await RequestGrid.ExportToExcelAsync();
                break;
            case "sfGridRequest_pdfexport":
                await RequestGrid.ExportToPdfAsync();
                break;
        }
    }
}

