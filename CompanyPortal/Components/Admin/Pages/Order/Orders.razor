@using CompanyPortal.CQRS.Orders.Commands
@using CompanyPortal.CQRS.Orders.Queries
@using CompanyPortal.Core.Enums
@using CompanyPortal.Core.Extensions
@using MediatR

@page "/Administration/Orders"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>ĐƠN HÀNG</h2>
        <button class="btn btn-lg btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(null)">
            <i class="fa-solid fa-circle-plus"></i> TẠO ĐƠN
        </button>
    </div>
</div>
<hr />

@if (_isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listOrder" @ref="OrderGrid" ID="sfGridOrder" class="overflow-x-scroll"
            AllowPaging="true" AllowSelection="true"
            AllowSorting="true" AllowResizing="true"
            EnableStickyHeader="true" EnableHover="true"
            Toolbar="_toolbarItems"
            AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Id", "ExternalId", "Fullname", "PhoneNumber", "Email", "Address", "Status", "DateCreated" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="OrderViewModel"></GridEvents>
        <GridColumns >
            <GridColumn AutoFit Field="@nameof(OrderViewModel.ExternalId)" HeaderText="MÃ ĐƠN" Width="128" Type="ColumnType.String"></GridColumn>
            <GridColumn AutoFit Field="@nameof(OrderViewModel.Fullname)" HeaderText="HỌ TÊN" Width="256" Type="ColumnType.String"></GridColumn>
            <GridColumn AutoFit Field="@nameof(OrderViewModel.PhoneNumber)" HeaderText="ĐIỆN THOẠI" Width="128" Type="ColumnType.String"></GridColumn>
            <GridColumn AutoFit Field="@nameof(OrderViewModel.DateCreated)" HeaderText="NGÀY ĐẶT" Width="196" Type="ColumnType.DateTime" Format="dd/MM/yyyy HH:mm"></GridColumn>
            <GridColumn AutoFit Field="@nameof(OrderViewModel.Total)" HeaderText="TỔNG TIỀN" Width="200" Format="#,#00đ" Type="ColumnType.Decimal"></GridColumn>
            <GridColumn AutoFit HeaderText="TRẠNG THÁI" Width="196">
                <Template>
                    @{
                        var order = context as OrderViewModel;
                        <span>@order!.Status.GetEnumDescription()</span>
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="CHUYỂN TRẠNG THÁI" TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var order = context as OrderViewModel;
                        if (order!.Status > OrderStatus.Ordered)
                        {
                            <button class="btn btn-warning btn-sm rounded-pill me-2" type="button" @onclick="() => UpdateOrderStatusAsync(order.Id, order.PreviousStatus)">
                                @order.PreviousStatus.GetEnumDescription() <i class="fa-solid fa-arrow-left"></i> @order.Status.GetEnumDescription()
                            </button>
                        }
                        if (order.Status < OrderStatus.Completed)
                        {
                            <button class="btn btn-success btn-sm rounded-pill" type="button" @onclick="() => UpdateOrderStatusAsync(order.Id, order.NextStatus)">
                                @order.Status.GetEnumDescription() <i class="fa-solid fa-arrow-right"></i> @order.NextStatus.GetEnumDescription()
                            </button>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var order = context as OrderViewModel;
                        <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialog(order!)">
                            <i class="fa-solid fa-eye"></i> XEM
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(order)">
                            <i class="fa-solid fa-pen-to-square"></i> SỬA
                        </button>
                        <button class="btn btn-sm btn-danger rounded-pill" @onclick="() => ShowDeleteDialogAsync(order!)">
                            <i class="fa-solid fa-trash"></i> HỦY ĐƠN
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<OrderViewModel> OrderGrid { get; set; } = default!;
    private List<OrderViewModel> _listOrder = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridOrder");
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _listOrder = await Mediator.Send(new GetAllOrdersQuery(true));
        _isLoading = false;
    }

    #region ACTIONS
    private async void ShowViewDialog(OrderViewModel selectedOrder)
    {
        var parameters = new ModalParameters().Add("Order", selectedOrder);
        var modalResult = await Modal.Show<ViewOrderDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;

        if ((modalResult.Cancelled || modalResult.Confirmed) && (bool)modalResult.Data!)
        {
            _isLoading = true;
            _listOrder = await Mediator.Send(new GetAllOrdersQuery(true));
            _isLoading = false;
        }
    }

    private async Task ShowEditDialogAsync(OrderViewModel? selectedOrder)
    {
        var order = selectedOrder != null ? selectedOrder.Clone()! : new OrderViewModel();
        var parameters = new ModalParameters().Add("order", order);
        var modalResult = await Modal.Show<EditOrderDialog>(parameters, new() { UseCustomLayout = true }).Result;

        if (modalResult.Confirmed)
        {
            _isLoading = true;
            var result = selectedOrder != null
                ? await UpdateOrderAsync((OrderViewModel)modalResult.Data!)
                : await CreateOrderAsync((OrderViewModel)modalResult.Data!);
            if (result)
            {
                _listOrder = await Mediator.Send(new GetAllOrdersQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi lưu đơn hàng. Vui lòng thử lại sau!"));
            }
            _isLoading = false;
        }
    }

    private async Task ShowDeleteDialogAsync(OrderViewModel selectedOrder)
    {
        var parameters = new ModalParameters().Add("Order", selectedOrder);
        var modalResult = await Modal.Show<DeleteOrderDialog>(parameters, new() { UseCustomLayout = true }).Result;

        if (modalResult.Confirmed)
        {
            _isLoading = true;
            var data = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteOrderCommand(selectedOrder.Id, data));
            if (result)
            {
                await Mediator.Send(new DeleteReferencingOrderDetailsCommand(selectedOrder.Id, data));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi xóa đơn hàng. Vui lòng thử lại sau!"));
            }
            _listOrder = await Mediator.Send(new GetAllOrdersQuery(true));
            _isLoading = false;
        }
    }

    private async Task UpdateOrderStatusAsync(int orderId, OrderStatus status)
    {
        var result = await Mediator.Send(new UpdateOrderStatusCommand(orderId, status));
        if (result.IsSuccess)
        {
            _isLoading = true;
            _listOrder = await Mediator.Send(new GetAllOrdersQuery(true));
            _isLoading = false;
        }
        else
        {
            Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi cập nhật trạng thái đơn hàng. Vui lòng thử lại sau!"));
        }
    }
    #endregion

    private async Task<bool> UpdateOrderAsync(OrderViewModel order)
    {
        var result = await Mediator.Send(new UpdateOrderCommand(order));
        if (result.IsSuccess)
        {
            await DeleteOrderDetailsAsync(order.OrderDetails.Where(x => x.Status == OrderDetailStatus.Removed).ToList(), true);
            await CreateOrderDetailsAsync((int)result.Data!, order.OrderDetails.Where(x => x.Status == OrderDetailStatus.New).ToList());
            await UpdateOrderDetailsAsync(order.OrderDetails.Where(x => x.Status == OrderDetailStatus.Modified).ToList());
        }

        return result.IsSuccess;
    }

    private async Task<bool> CreateOrderAsync(OrderViewModel order)
    {
        var result = await Mediator.Send(new CreateOrderCommand(order));
        if (result.IsSuccess)
        {
            await CreateOrderDetailsAsync((int)result.Data!, order.OrderDetails);
        }

        return result.IsSuccess;
    }

    private async Task CreateOrderDetailsAsync(int orderId, List<OrderDetailViewModel> orderDetails)
    {
        foreach (var orderDetail in orderDetails)
        {
            orderDetail.OrderId = orderId;
            await Mediator.Send(new CreateOrderDetailCommand(orderDetail));
        }
    }

    private async Task DeleteOrderDetailsAsync(List<OrderDetailViewModel> orderDetails, bool forceDelete = false)
    {
        await Mediator.Send(new DeleteOrderDetailsCommand(orderDetails.Select(x => x.Id).ToList(), forceDelete));
    }

    private async Task UpdateOrderDetailsAsync(List<OrderDetailViewModel> orderDetails)
    {
        foreach (var orderDetail in orderDetails)
        {
            await Mediator.Send(new UpdateOrderDetailCommand(orderDetail));
        }
    }

    #region Events

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "sfGridOrder_excelexport":
                await OrderGrid.ExportToExcelAsync();
                break;
            case "sfGridOrder_pdfexport":
                await OrderGrid.ExportToPdfAsync();
                break;
        }
    }

    #endregion
}
