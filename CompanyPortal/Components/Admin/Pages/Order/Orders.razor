@using CompanyPortal.CQRS.Orders.Queries
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor
@using MediatR
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h3>ĐƠN HÀNG</h3>
    </div>
</div>
<hr />

<SfGrid DataSource="@_listOrder" @ref="OrderGrid" ID="sfGridArticle"
        AllowPaging="true" AllowSelection="true"
        AllowSorting="true" AllowResizing="true"
        EnableStickyHeader="true" EnableHover="true"
        Toolbar="_toolbarItems"
        AllowExcelExport="true" AllowPdfExport="true">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridSearchSettings Fields="@(new[] { "Title", "Content", "Tags" })"></GridSearchSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ArticleViewModel"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(ArticleViewModel.Id)" HeaderText="ID" Width="64"></GridColumn>
        <GridColumn Field="@nameof(ArticleViewModel.Title)" HeaderText="TIÊU ĐỀ" Width="486" Type="ColumnType.String"></GridColumn>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                @{
                    var order = context as OrderViewModel;
                    <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialogAsync(order!)">
                        <i class="fa-solid fa-eye"></i> XEM
                    </button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private SfGrid<ArticleViewModel> OrderGrid { get; set; } = default!;
    private List<ArticleViewModel> _listOrder = [];
    private bool _isLoading;

    private readonly List<ItemModel> _toolbarItems =
    [
        new ItemModel { Text = "Xuất Excel", Id = "sfGridArticle_excelexport", PrefixIcon = "fa-solid fa-file-excel" },
        new ItemModel { Text = "Xuất PDF", Id = "sfGridArticle_pdfexport", PrefixIcon = "fa-solid fa-file-pdf" }
    ];

    private readonly List<ToolbarItemModel> _contentEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
        new ToolbarItemModel { Command = ToolbarCommand.Italic },
        new ToolbarItemModel { Command = ToolbarCommand.Underline },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Formats },
        new ToolbarItemModel { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel { Command = ToolbarCommand.Image },
        new ToolbarItemModel { Command = ToolbarCommand.Video },
        new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    private async Task ShowViewDialogAsync(OrderViewModel selectedOrder)
    {
        var orderDetails = await Mediator.Send(new GetOrderDetailByIdQuery(selectedOrder!.Id, true));
        selectedOrder.OrderDetails = orderDetails;
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-xlarge"
            };
        var parameters = new ModalParameters().Add("Order", selectedOrder);
        Modal.Show<ViewOrderDialog>("THÔNG TIN ĐẶT HÀNG", parameters, options);
    }

    // Events

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "sfGridOrder_excelexport":
                await OrderGrid.ExportToExcelAsync();
                break;
            case "sfGridOrder_pdfexport":
                await OrderGrid.ExportToPdfAsync();
                break;
        }
    }
}
