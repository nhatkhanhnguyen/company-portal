@using CompanyPortal.Core.Common
@using CompanyPortal.Core.Enums
@using CompanyPortal.Core.Extensions
@using System.Globalization
<ModalDialog SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">CHỈNH SỬA ĐƠN HÀNG</h5>
        <button type="button" class="btn-close" aria-label="Close" @onclick="Cancel"></button>
    </Header>
    <Body>
        @if (_isLoading)
        {
            <Spinner></Spinner>
        }
        else
        {
            <EditForm Model="Order" OnValidSubmit="Submit" id="FormOrder" class="row g-3">
                <fieldset class="col-lg-6 col-sm-12">
                    <FluentValidationValidator ValidatorType="typeof(ProductFormValidator)" />
                    <div class="row">
                        <div class="col-lg-6 col-sm-12 mb-3">
                            <Label For="@(() => Order.ExternalId)" CssClass="form-label"></Label>
                            <InputText class="form-control" maxlength="20" @bind-Value="Order.ExternalId" />
                            <ValidationMessage For="@(() => Order.ExternalId)" />
                        </div>
                        <div class="col-lg-6 col-sm-12 mb-3">
                            <Label For="@(() => Order.Status)" CssClass="form-label"></Label>
                            <SfComboBox TValue="OrderStatus" TItem="EnumToRecord<OrderStatus>" @bind-Value="Order.Status" class="form-control" DataSource="_orderStatus">
                                <ComboBoxFieldSettings Value="Value" Text="DisplayName"></ComboBoxFieldSettings>
                            </SfComboBox>
                            <ValidationMessage For="@(() => Order.Status)" />
                        </div>
                        <div class="col-12 mb-3">
                            <Label For="@(() => Order.Fullname)" CssClass="form-label"></Label>
                            <InputText class="form-control" maxlength="100" @bind-Value="Order.Fullname" />
                            <ValidationMessage For="@(() => Order.Fullname)" />
                        </div>                        
                        <div class="col-12 mb-3">
                            <Label For="@(() => Order.Address)" CssClass="form-label"></Label>
                            <InputText class="form-control" maxlength="100" @bind-Value="Order.Fullname" />
                            <ValidationMessage For="@(() => Order.Fullname)" />
                        </div>                        
                        <div class="col-12 mb-3">
                            <Label For="@(() => Order.PhoneNumber)" CssClass="form-label"></Label>
                            <InputText class="form-control" maxlength="100" @bind-Value="Order.Fullname" />
                            <ValidationMessage For="@(() => Order.Fullname)" />
                        </div>
                        <div class="col-12 mb-3">
                            <Label For="@(() => Order.Email)" CssClass="form-label"></Label>
                            <InputText class="form-control" maxlength="100" @bind-Value="Order.Fullname" />
                            <ValidationMessage For="@(() => Order.Fullname)" />
                        </div>
                        
                        <div class="col-12">
                            <div class="form-check d-flex">
                                <InputCheckbox @bind-Value="Order.MarkedAsInactive" class="form-check-input align-self-baseline" />
                                <span class="form-check-label ms-2">
                                    <Label For="@(() => Order.MarkedAsInactive)" CssClass="form-label"></Label>
                                </span>
                            </div>
                        </div>
                        <div class="col-12 table-responsive">
                            <table class="table table-striped table-hover align-middle">
                                <tbody>
                                    @foreach (var orderDetail in Order.OrderDetails)
                                    {
                                        <tr>
                                            <td width="150px">
                                                <img src="@orderDetail.ProductImageUrl" alt="@orderDetail.ProductName" class="img-fluid" />
                                            </td>
                                            <td>
                                                <b>@orderDetail.ProductName</b>
                                            </td>
                                            <td>
                                                Số lượng: <InputNumber @bind-Value="orderDetail.Quantity" class="form-control" min="1" />
                                            </td>
                                            <td>
                                                Tổng: <b>@orderDetail.Total.ToString("C", CultureInfo.GetCultureInfo("vi-vn"))</b>
                                            </td>
                                            <td>
                                                <button class="btn btn-danger btn-sm rounded-pill" @onclick="() => RemoveOrderDetail(orderDetail)"><i class="fa-solid fa-trash"></i> Xóa</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </fieldset>
            </EditForm>
        }
    </Body>
    <Footer>
        <div class="row">
            <div class="col-12">
                <LoadingButton Type="submit" IconCss="fa-solid fa-floppy-disk" ForForm="FormProduct" ButtonCssClass="btn-primary rounded-pill me-2"
                               LoadingText="ĐANG LƯU" NormalText="LƯU" />
                <button type="button" class="btn btn-danger rounded-pill" @onclick="Cancel"><i class="fa-solid fa-xmark"></i> HỦY</button>
            </div>
        </div>
    </Footer>
</ModalDialog>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public OrderViewModel Order { get; set; } = new();
    private List<EnumToRecord<OrderStatus>> _orderStatus = Enum.GetValues<OrderStatus>().Select(e => new EnumToRecord<OrderStatus>(e.GetDescription(), e)).ToList();
    private bool _isLoading;

    private void Cancel() => BlazoredModal.CancelAsync();

    private void Submit()
    {
        Order.IsActive = !Order.MarkedAsInactive;
        BlazoredModal.CloseAsync(ModalResult.Ok<OrderViewModel>(Order));
    }

    private void RemoveOrderDetail(OrderDetailViewModel orderDetail)
    {
        
    }
}