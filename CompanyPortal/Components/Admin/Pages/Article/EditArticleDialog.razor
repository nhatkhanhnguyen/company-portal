@using CompanyPortal.Core.Common
@using CompanyPortal.Core.Enums
@using Syncfusion.Blazor.RichTextEditor
@using CompanyPortal.Core.Extensions

<ModalDialog SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">@(Article.Id > 0 ? "CHỈNH SỬA BÀI VIẾT" : "THÊM BÀI VIẾT")</h5>
        <button type="button" class="btn-close" aria-label="Close" @onclick="Cancel"></button>
    </Header>
    <Body>
        @if (_isLoading)
        {
            <Spinner></Spinner>
        }
        else
        {
            <EditForm Model="Article" OnValidSubmit="Submit" id="FormArticle" class="row g-3">
                <FluentValidationValidator ValidatorType="typeof(ArticleFormValidator)" />
                <div class="col-12 mb-3">
                    <Label For="@(() => Article.CoverImage)" CssClass="form-label"></Label>
                    <FileUploader Files="[Article.CoverImage]" ButtonText="Chọn ảnh" Id="fileUploader" AcceptFileExtensions=".jpg,.png" AllowMultiple="false" ShowPreview></FileUploader>
                    <ValidationMessage For="@(() => Article.CoverImage)" />
                </div>
                <div class="col-6 mb-3">
                    <Label For="@(() => Article.Title)" CssClass="form-label"></Label>
                    <InputText class="form-control" @bind-Value="Article.Title" />
                    <ValidationMessage For="@(() => Article.Title)" />
                </div>
                <div class="col-6 mb-3">
                    <Label For="@(() => Article.Type)" CssClass="form-label"></Label>
                    <SfComboBox TValue="ArticleType" TItem="EnumToRecord<ArticleType>" @bind-Value="Article.Type" class="form-control" DataSource="_articleTypes">
                        <ComboBoxFieldSettings Value="Value" Text="DisplayName"></ComboBoxFieldSettings>
                    </SfComboBox>
                    <ValidationMessage For="@(() => Article.Title)" />
                </div>
                <div class="col-12 mb-3">
                    <Label For="@(() => Article.Tags)" CssClass="form-label"></Label>
                    <InputText class="form-control" @bind-Value="Article.Tags" />
                    <ValidationMessage For="@(() => Article.Tags)" />
                </div>
                <div class="col-12 mb-3">
                    <Label For="@(() => Article.Content)" CssClass="form-label"></Label>
                    <SfRichTextEditor ID="contentEditor" @bind-Value="Article.Content" Height="400">
                        <RichTextEditorToolbarSettings Items="@_contentEditorTools" />
                    </SfRichTextEditor>
                    <ValidationMessage For="@(() => Article.Content)" />
                </div>
                <div class="col-12">
                    <div class="form-check d-flex">
                        <InputCheckbox @bind-Value="Article.MarkedAsInactive" class="form-check-input align-self-baseline" />
                        <span class="form-check-label ms-2">
                            <Label For="@(() => Article.MarkedAsInactive)" CssClass="form-label"></Label>
                        </span>
                    </div>
                </div>
            </EditForm>
        }
    </Body>
    <Footer>
        <div class="row">
            <div class="col-12">
                <LoadingButton Type="submit" IconCss="fa-solid fa-floppy-disk" ForForm="FormArticle" ButtonCssClass="btn-primary rounded-pill me-2" LoadingText="ĐANG LƯU" NormalText="LƯU" />
                <button type="button" class="btn btn-danger rounded-pill" @onclick="Cancel"><i class="fa-solid fa-xmark"></i> HỦY</button>
            </div>
        </div>
    </Footer>
</ModalDialog>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public ArticleViewModel Article { get; set; } = new();
    [Parameter] public List<CategoryViewModel> Categories { get; set; } = [];

    private readonly List<EnumToRecord<ArticleType>> _articleTypes = EnumExtensions.GetEnumToRecords<ArticleType>();
    private readonly List<ToolbarItemModel> _contentEditorTools = DataGrid.ContentEditorTools;
    private bool _isLoading = true;

    private void Cancel() => BlazoredModal.CancelAsync();

    private void Submit()
    {
        Article.IsActive = !Article.MarkedAsInactive;
        BlazoredModal.CloseAsync(ModalResult.Ok<ArticleViewModel>(Article));
    }
}
