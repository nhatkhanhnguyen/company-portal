@using CompanyPortal.Core.Enums
@using Syncfusion.Blazor.RichTextEditor
@using CompanyPortal.Core.Extensions

<EditForm Model="Article" OnValidSubmit="InsertOrUpdateAsync" id="FormArticle" class="row g-3">
    <FluentValidationValidator ValidatorType="typeof(ArticleFormValidator)" />
    <div class="col-6 mb-3">
        <Label For="@(() => Article.Title)" CssClass="form-label"></Label>
        <InputText class="form-control" @bind-Value="Article.Title" />
        <ValidationMessage For="@(() => Article.Title)" />
    </div>
    <div class="col-6 mb-3">
        <Label For="@(() => Article.Type)" CssClass="form-label"></Label>
        <SfComboBox TValue="ArticleType" TItem="ComboBoxItem" @bind-Value="Article.Type" class="form-control" DataSource="_articleTypes">
            <ComboBoxFieldSettings Value="Value" Text="Name"></ComboBoxFieldSettings>
        </SfComboBox>
        <ValidationMessage For="@(() => Article.Title)" />
    </div>
    <div class="col-12 mb-3">
        <Label For="@(() => Article.Tags)" CssClass="form-label"></Label>
        <InputText class="form-control" @bind-Value="Article.Tags" />
        <ValidationMessage For="@(() => Article.Tags)" />
    </div>
    <div class="col-12 mb-3">
        <Label For="@(() => Article.Content)" CssClass="form-label"></Label>
        <SfRichTextEditor ID="contentEditor" @bind-Value="Article.Content" Height="400">
            <RichTextEditorToolbarSettings Items="@_contentEditorTools" />
        </SfRichTextEditor>
        <ValidationMessage For="@(() => Article.Content)" />
    </div>
    <div class="col-12">
        <div class="form-check d-flex">
            <InputCheckbox @bind-Value="Article.MarkedAsInactive" class="form-check-input align-self-baseline" />
            <span class="form-check-label ms-2">
                <Label For="@(() => Article.MarkedAsInactive)" CssClass="form-label"></Label>
            </span>
        </div>
    </div>
</EditForm>

<hr />
<div class="row">
    <div class="col-12 d-flex justify-content-end">
        <LoadingButton Type="submit" IconCss="fa-solid fa-floppy-disk" ForForm="FormProduct" ButtonCssClass="btn-primary rounded-pill me-2"
                       LoadingText="ĐANG LƯU" NormalText="LƯU" OnClick="InsertOrUpdateAsync" />
        <button type="button" class="btn btn-danger rounded-pill" @onclick="CancelAsync"><i class="fa-solid fa-xmark"></i> HỦY</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public ArticleViewModel Article { get; set; } = new();
    [Parameter] public List<CategoryViewModel> Categories { get; set; } = [];

    private List<ComboBoxItem> _articleTypes = Enum.GetValues<ArticleType>().Select(e => new ComboBoxItem(e.GetDescription(), e)).ToList();
    private readonly List<ToolbarItemModel> _contentEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
    new ToolbarItemModel { Command = ToolbarCommand.Italic },
    new ToolbarItemModel { Command = ToolbarCommand.Underline },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.Formats },
    new ToolbarItemModel { Command = ToolbarCommand.Alignments },
    new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
    new ToolbarItemModel { Command = ToolbarCommand.Image },
    new ToolbarItemModel { Command = ToolbarCommand.Video },
    new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
    new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];


    private async Task CancelAsync() => await BlazoredModal.CancelAsync();

    private async Task InsertOrUpdateAsync()
    {
        Article.IsActive = !Article.MarkedAsInactive;
        await BlazoredModal.CloseAsync(ModalResult.Ok<ArticleViewModel>(Article));
    }

    record ComboBoxItem(string Name, ArticleType Value);
}
