@using MediatR
@using CompanyPortal.CQRS.Articles.Commands
@using CompanyPortal.CQRS.Articles.Queries
@using CompanyPortal.CQRS.Resources.Commands
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor
@using CompanyPortal.Core.Extensions
@using CompanyPortal.Core.Enum

@inject IJSRuntime Js

@page "/Administration/Articles"
@inject IMediator Mediator

<h3>Articles</h3>
<hr />

<SfGrid DataSource="@_listArticle" @ref="ArticleGrid" ID="sfGridArticle"
        AllowPaging="true" AllowSelection="true"
        AllowSorting="true" AllowResizing="true"
        EnableStickyHeader="true" EnableHover="true"
        Toolbar="_toolbarItems"
        AllowExcelExport="true" AllowPdfExport="true">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridSearchSettings Fields="@(new[] { "Title", "Content", "Tags" })"></GridSearchSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ArticleViewModel"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(ArticleViewModel.Id)" HeaderText="ID" Width="64"></GridColumn>
        <GridColumn Field="@nameof(ArticleViewModel.Title)" HeaderText="TIÊU ĐỀ" Width="486" Type="ColumnType.String"></GridColumn>
        <GridColumn HeaderText="TAGS">
            <Template>
                @{
                    var article = context as ArticleViewModel;
                    foreach (var tag in article!.Tags.Split(' '))
                    {
                        <span class="badge rounded-pill text-bg-info me-1">@tag</span>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
            <Template>
                @{
                    var article = context as ArticleViewModel;
                    if (!article!.IsActive)
                    {
                        <i class="fa-solid fa-check" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Hiện"></i>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                @{
                    var article = context as ArticleViewModel;
                    <button class="btn btn-sm btn-info" @onclick="() => ShowViewDialogAsync(article!.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Preview">
                        <i class="fa-solid fa-eye"></i> XEM
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="() => ShowEditDialogAsync(article!.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Edit">
                        <i class="fa-solid fa-pen-to-square"></i> SỬA
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteDialog(article!.Id)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Delete">
                        <i class="fa-solid fa-trash"></i> XÓA
                    </button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="row">
    <div class="col-12 mt-2">
        <button class="btn btn-primary float-end" @onclick="() => ShowEditDialogAsync()">
            <i class="fa-solid fa-plus"></i> THÊM SẢN PHẨM
        </button>
    </div>
</div>

<ModalDialog @ref="EditDialog" SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">@(_selectedArticle.Id > 0 ? "Edit" : "Create")</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => EditDialog.Close()"></button>
    </Header>
    <Body>
        <EditForm Model="_selectedArticle" OnValidSubmit="InsertOrUpdateAsync" id="FormArticle" class="row g-3">
            <FluentValidationValidator ValidatorType="typeof(ArticleFormValidator)" />

            <div class="col-12 mb-3">
                <Label For="@(() => _selectedArticle.Title)" CssClass="form-label"></Label>
                <InputText class="form-control" @bind-Value="_selectedArticle.Title" disabled="@_isLoading" />
                <ValidationMessage For="@(() => _selectedArticle.Title)" />
            </div>
            <div class="col-12 mb-3">
                <Label For="@(() => _selectedArticle.Content)" CssClass="form-label"></Label>
                <SfRichTextEditor ID="contentEditor" @bind-Value="_selectedArticle.Content" Height="400" Enabled="!_isLoading">
                    <RichTextEditorToolbarSettings Items="@_contentEditorTools" />
                </SfRichTextEditor>
                <ValidationMessage For="@(() => _selectedArticle.Content)" />
            </div>
            <div class="col-12 mb-3">
                <Label For="@(() => _selectedArticle.Tags)" CssClass="form-label"></Label>
                <InputText class="form-control" @bind-Value="_selectedArticle.Tags" disabled="@_isLoading" />
                <ValidationMessage For="@(() => _selectedArticle.Tags)" />
            </div>
            <div class="col-12">
                <div class="form-check d-flex">
                    <InputCheckbox @bind-Value="_selectedArticle.MarkedAsInactive" class="form-check-input align-self-baseline" disabled="@_isLoading" />
                    <span class="form-check-label ms-2">
                        <Label For="@(() => _selectedArticle.MarkedAsInactive)" CssClass="form-label"></Label>
                    </span>
                </div>
            </div>
        </EditForm>
    </Body>
    <Footer>
        <button class="btn btn-danger float-end me-2" @onclick="() => EditDialog.Close()">Close</button>
        <LoadingButton ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Saving" NormalText="Save" @onclick="InsertOrUpdateAsync" />
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ViewDialog" SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">Preview</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => ViewDialog.Close()"></button>
    </Header>
    <Body>
        <ArticleView IsEditing="true" Article="@_selectedArticle" />
    </Body>
</ModalDialog>

<ModalDialog @ref="@DeleteDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-triangle-exclamation"></i> Delete @_selectedArticle.Title!
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => DeleteDialog.Close()"></button>
    </Header>
    <Body>
        <p>Are you sure you want to delete @_selectedArticle.Title. This action can't be un-done.</p>
        <InputCheckbox @bind-Value="_forceDelete" /> Delete permanently
    </Body>
    <Footer>
        <LoadingButton ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Deleting" NormalText="Yes" @onclick="() => DeleteAsync(_forceDelete)" />
        <button class="btn btn-primary float-end me-2" @onclick="() => DeleteDialog.Close()">No</button>
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ErrorDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-circle-exclamation"></i> Error occured
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ErrorDialog.Close()"></button>
    </Header>
    <Body>
        <p>@_errorMessage</p>
    </Body>
    <Footer>
        <button class="btn btn-primary float-middle" @onclick="() => ErrorDialog.Close()">OK</button>
    </Footer>
</ModalDialog>

<script>
    function addTooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    }
</script>

<style>
    .validation-message {
        font-size: .875em;
        color: red;
    }
</style>

@code {
    private ModalDialog EditDialog { get; set; } = default!;
    private ModalDialog ViewDialog { get; set; } = default!;
    private ModalDialog DeleteDialog { get; set; } = default!;
    private ModalDialog ErrorDialog { get; set; } = default!;
    private FileUploader ImageUploader { get; set; } = default!;

    private SfGrid<ArticleViewModel> ArticleGrid { get; set; } = default!;

    private List<ArticleViewModel> _listArticle = [];
    private string _errorMessage = "";
    private bool _forceDelete;
    private ArticleViewModel _selectedArticle = new();
    private List<ResourceViewModel> _originalArticleImages = [];
    private bool _isLoading;

    private readonly List<ItemModel> _toolbarItems = 
    [
        new ItemModel { Text = "Xuất Excel", Id = "sfGridArticle_excelexport", PrefixIcon = "fa-solid fa-file-excel" },
        new ItemModel { Text = "Xuất PDF", Id = "sfGridArticle_pdfexport", PrefixIcon = "fa-solid fa-file-pdf" }
    ];

    private readonly List<ToolbarItemModel> _contentEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
        new ToolbarItemModel { Command = ToolbarCommand.Italic },
        new ToolbarItemModel { Command = ToolbarCommand.Underline },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Formats },
        new ToolbarItemModel { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel { Command = ToolbarCommand.Image },
        new ToolbarItemModel { Command = ToolbarCommand.Video },
        new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;
        _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("addTooltips");
    }

    private async Task ShowEditDialogAsync(int? id = null)
    {
        _selectedArticle = id != null ? _listArticle.First(x => x.Id == id).Clone() : new ArticleViewModel();
        _selectedArticle.Images = [];
        if (id != null)
        {
            var images = await Mediator.Send(new GetArticleImagesByIdQuery(id.Value, true));
            _selectedArticle.Images = [.. images];
            _originalArticleImages = images;
        }
        EditDialog.Open();
    }

    private async Task ShowViewDialogAsync(int id)
    {
        _selectedArticle = _listArticle.First(x => x.Id == id);
        var images = await Mediator.Send(new GetArticleImagesByIdQuery(id, true));
        _selectedArticle.Images = images;
        ViewDialog.Open();
    }

    private void ShowDeleteDialog(int id)
    {
        _selectedArticle = _listArticle.First(x => x.Id == id);
        DeleteDialog.Open();
    }

    // Data

    private async Task InsertOrUpdateAsync()
    {
        _isLoading = true;
        var product = _selectedArticle.Clone();
        product.IsActive = !_selectedArticle.MarkedAsInactive;
        var articleId = _selectedArticle.Id > 0 ? await UpdateArticleAsync(product) : await CreateArticleAsync(product);

        if (articleId <= 0)
        {
            var request = _selectedArticle.Id > 0 ? "updating" : "creating";
            _errorMessage = $"There is a problem while {request} article {_selectedArticle.Title}.";
            ErrorDialog.Open();
        }
        EditDialog.Close();
        _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
        _isLoading = false;
    }

    private async Task DeleteAsync(bool forceDelete)
    {
        _isLoading = true;
        var result = await Mediator.Send(new DeleteArticleCommand(_selectedArticle.Id, forceDelete));
        if (!result)
        {
            _errorMessage = $"There is a problem while deleting product {_selectedArticle.Title}.";
            ErrorDialog.Open();
        }
        _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
        DeleteDialog.Close();
        _isLoading = false;
    }

    // Events

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // ArticleId is combination of Grid's ID and itemname
            case "sfGridArticle_excelexport":
                await ArticleGrid.ExportToExcelAsync();
                break;
            case "sfGridArticle_pdfexport":
                await ArticleGrid.ExportToPdfAsync();
                break;
        }
    }

    private async Task<int> UpdateArticleAsync(ArticleViewModel article)
    {
        var articleId = await Mediator.Send(new UpdateArticleCommand(article));
        if (articleId > 0)
        {
            var removedOldImages = GetRemovedOldImages(_originalArticleImages, article.Images.Where(x => x.Status == UploadFileStatus.Old));
            await DeleteArticleImagesAsync(removedOldImages, true);
            await CreateArticleImagesAsync(articleId, article.Images.Where(x => x.Status == UploadFileStatus.New));
        }

        return articleId;
    }

    private async Task<int> CreateArticleAsync(ArticleViewModel article)
    {
        var articleId = await Mediator.Send(new CreateArticleCommand(article));
        if (articleId > 0)
        {
            await CreateArticleImagesAsync(articleId, article.Images);
        }

        return articleId;
    }

    private async Task CreateArticleImagesAsync(int articleId, IEnumerable<ResourceViewModel> newImages)
    {
        foreach (var image in newImages)
        {
            var imageUploadResult = await Mediator.Send(new UploadToStorageCommand(image));
            image.Url = imageUploadResult.Url;
            image.BlobName = imageUploadResult.BlobName;
            image.ArticleId = articleId;
            image.ResourceType = ResourceType.Image;
            await Mediator.Send(new CreateResourceCommand(image));
        }
    }

    private async Task DeleteArticleImagesAsync(List<ResourceViewModel> images, bool forceDelete = false)
    {
        var result = await Mediator.Send(new DeleteResourcesCommand(images.Select(x => x.Id).ToList(), forceDelete));
        if (result && forceDelete)
        {
            await Mediator.Send(new DeleteFromStorageCommand(images.Select(x => x.BlobName).ToList()));
        }
    }

    private List<ResourceViewModel> GetRemovedOldImages(IEnumerable<ResourceViewModel> originalOldImages, IEnumerable<ResourceViewModel> newOldImages)
    {
        return originalOldImages.Where(p => newOldImages.All(p2 => p2.Id != p.Id)).ToList();
    }
}