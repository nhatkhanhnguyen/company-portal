@using CompanyPortal.Core.Extensions
@using CompanyPortal.CQRS.Articles.Commands
@using CompanyPortal.CQRS.Articles.Queries
@using CompanyPortal.CQRS.Resources.Commands
@using CompanyPortal.Core.Enums
@using MediatR

@inject IMediator Mediator
@page "/Administration/Articles"

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>BÀI VIẾT</h2>
        <button class="btn btn-lg btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(null)">
            <i class="fa-solid fa-circle-plus"></i> THÊM
        </button>
    </div>
</div>
<hr />

@if (_isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listArticle" @ref="ArticleGrid" ID="sfGridArticle"
            AllowPaging="true" AllowSelection="true"
            AllowSorting="true" AllowResizing="true"
            EnableStickyHeader="true" EnableHover="true"
            Toolbar="_toolbarItems"
            AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Title", "Content", "Tags" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandlerAsync" TValue="ArticleViewModel"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(ArticleViewModel.Id)" HeaderText="ID" Width="64"></GridColumn>
            <GridColumn Field="@nameof(ArticleViewModel.Title)" HeaderText="TIÊU ĐỀ" Width="512" Type="ColumnType.String"></GridColumn>
            <GridColumn HeaderText="TAGS">
                <Template>
                    @{
                        var article = context as ArticleViewModel;
                        foreach (var tag in article!.Tags.Split(' '))
                        {
                            <span class="badge rounded-pill text-bg-info me-1">@tag</span>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="LOẠI BÀI VIẾT" Width="200" Type="ColumnType.String">
                <Template>
                    @{
                        var article = (ArticleViewModel)context;
                        <p>@article.Type.GetEnumDescription()</p>
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
                <Template>
                    @{
                        var article = context as ArticleViewModel;
                        if (!article!.IsActive)
                        {
                            <i class="fa-solid fa-check" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Hiện"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var article = context as ArticleViewModel;
                        <button class="btn btn-sm btn-info rounded-pill" @onclick="() => ShowViewDialogAsync(article!)">
                            <i class="fa-solid fa-eye"></i> XEM
                        </button>
                        <button class="btn btn-sm btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(article)">
                            <i class="fa-solid fa-pen-to-square"></i> SỬA
                        </button>
                        <button class="btn btn-sm btn-danger rounded-pill" @onclick="() => ShowDeleteDialogAsync(article!)">
                            <i class="fa-solid fa-trash"></i> XÓA
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<ArticleViewModel> ArticleGrid { get; set; } = default!;
    private List<ArticleViewModel> _listArticle = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridArticle");
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
        _isLoading = false;
    }

    private async Task ShowEditDialogAsync(ArticleViewModel? selectedArticle)
    {
        var article = selectedArticle != null ? selectedArticle.Clone() : new ArticleViewModel();
        var parameters = new ModalParameters().Add("article", article);
        var modalResult = await Modal.Show<EditArticleDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var result = selectedArticle != null 
                ? await UpdateArticleAsync((ArticleViewModel)modalResult.Data!) 
                : await CreateArticleAsync((ArticleViewModel)modalResult.Data!);
            if (result)
            {
                _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters()
                    .Add("ErrorMessage", "Có lỗi xảy ra khi lưu bài viết. Vui lòng thử lại sau!"));
            }
        }
    }

    private Task ShowViewDialogAsync(ArticleViewModel selectedArticle)
    {
        var parameters = new ModalParameters().Add("Article", selectedArticle);
        Modal.Show<ViewArticleDialog>(parameters, new ModalOptions { UseCustomLayout = true });
        return Task.CompletedTask;
    }

    private async Task ShowDeleteDialogAsync(ArticleViewModel selectedArticle)
    {
        var parameters = new ModalParameters().Add("Title", selectedArticle.Title);
        var modalResult = await Modal.Show<DeleteArticleDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var forceDelete = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteArticleCommand(selectedArticle.Id, forceDelete));
            if (result.IsSuccess)
            {
                await Mediator.Send(new DeleteResourcesByExpressionCommand(x => x.ArticleId == selectedArticle.Id, forceDelete));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters()
                    .Add("ErrorMessage", "Có lỗi xảy ra khi xóa sản phẩm. Vui lòng thử lại sau!"));
            }
        }
        _listArticle = await Mediator.Send(new GetAllArticlesQuery(true));
    }

    // Data

    private async Task<bool> UpdateArticleAsync(ArticleViewModel article)
    {
        var result = await Mediator.Send(new UpdateArticleCommand(article));
        if (!result.IsSuccess)
        {
            return result.IsSuccess;
        }
        await DeleteArticleImagesAsync(article.CoverImage, true);
        await CreateArticleImagesAsync((int)result.Data!, article.CoverImage);

        return result.IsSuccess;
    }

    private async Task<bool> CreateArticleAsync(ArticleViewModel article)
    {
        var result = await Mediator.Send(new CreateArticleCommand(article));
        if (result.IsSuccess)
        {
            await CreateArticleImagesAsync((int)result.Data!, article.CoverImage);
        }

        return result.IsSuccess;
    }

    private Task CreateArticleImagesAsync(int articleId, ResourceViewModel image)
    {
        image.ArticleId = articleId;
        image.ResourceType = ResourceType.Image;
        return Mediator.Send(new CreateResourceCommand(image));
    }

    private async Task DeleteArticleImagesAsync(ResourceViewModel image, bool forceDelete = false)
    {
        var result = await Mediator.Send(new DeleteResourcesCommand([image.Id], forceDelete));
        if (result.IsSuccess && forceDelete)
        {
            await Mediator.Send(new DeleteFromStorageCommand([image.BlobName]));
        }
    }

    // Events

    private async Task ToolbarClickHandlerAsync(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // ArticleId is combination of Grid's ID and itemname
            case "sfGridArticle_excelexport":
                await ArticleGrid.ExportToExcelAsync();
                break;
            case "sfGridArticle_pdfexport":
                await ArticleGrid.ExportToPdfAsync();
                break;
        }
    }
}