@using CompanyPortal.Core.Common
@using CompanyPortal.Core.Enums
@using MediatR
@using CompanyPortal.CQRS.Categories.Commands
@using CompanyPortal.CQRS.Categories.Queries
@using CompanyPortal.Core.Extensions
@using CompanyPortal.CQRS.Resources.Commands

@page "/Administration/Categories"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h2>DANH MỤC</h2>
        <button class="btn btn-lg btn-primary rounded-pill" @onclick="() => ShowEditDialogAsync(null)">
            <i class="fa-solid fa-circle-plus"></i> THÊM
        </button>
    </div>
</div>
<hr />

@if (_isLoading)
{
    <Spinner></Spinner>
}
else
{
    <SfGrid DataSource="@_listCategory" @ref="CategoryGrid" ID="sfGridCategory"
            AllowPaging="true" AllowSelection="true"
            AllowSorting="true" AllowResizing="true"
            EnableStickyHeader="true" EnableHover="true"
            Toolbar="_toolbarItems"
            AllowExcelExport="true" AllowPdfExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSearchSettings Fields="@(new[] { "Id", "ExternalId", "Name", "Description" })"></GridSearchSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandlerAsync" TValue="CategoryViewModel">
        </GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(CategoryViewModel.Id)"
                        HeaderText="ID"
                        Width="64">
            </GridColumn>
            <GridColumn Field="@nameof(CategoryViewModel.Name)"
                        HeaderText="TÊN"
                        Width="486"
                        Type="ColumnType.String">
            </GridColumn>
            <GridColumn Field="@nameof(CategoryViewModel.ExternalId)"
                        HeaderText="MÃ"
                        Width="486"
                        Type="ColumnType.String">
            </GridColumn>
            <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
                <Template>
                    @{
                        var category = context as CategoryViewModel;
                        if (!category!.IsActive)
                        {
                            <i class="fa-solid fa-check"></i>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn TextAlign="TextAlign.Right">
                <Template>
                    @{
                        var category = context as CategoryViewModel;
                        <button class="btn btn-info btn-sm rounded-pill" @onclick="() => ShowViewDialog(category!)"><i class="fa-solid fa-eye"></i> XEM</button>
                        <button class="btn btn-primary btn-sm rounded-pill" @onclick="() => ShowEditDialogAsync(category!)"><i class="fa-solid fa-pen-to-square"></i> SỬA</button>
                        <button class="btn btn-danger btn-sm rounded-pill" @onclick="() => ShowDeleteDialogAsync(category!)"><i class="fa-solid fa-trash"></i> XÓA</button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private SfGrid<CategoryViewModel> CategoryGrid { get; set; } = default!;
    private List<CategoryViewModel> _listCategory = [];
    private readonly List<ItemModel> _toolbarItems = DataGrid.ToolbarItems("sfGridCategory");
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
        _isLoading = false;
    }

    private async Task ShowEditDialogAsync(CategoryViewModel? selectedCategory)
    {
        var category = selectedCategory != null ? selectedCategory.Clone()! : new CategoryViewModel();

        var parameters = new ModalParameters().Add("Category", category);
        var modalResult = await Modal.Show<EditCategoryDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var data = modalResult.Data as CategoryViewModel;
            var result = selectedCategory != null ? await UpdateCategoryAsync(data!) : await CreateCategoryAsync(data!);
            if (result)
            {
                _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi lưu danh mục!"));
            }
        }
    }

    private void ShowViewDialog(CategoryViewModel selectedCategory)
    {
        var parameters = new ModalParameters().Add("Category", selectedCategory);
        Modal.Show<ViewCategoryDialog>(parameters, new ModalOptions { UseCustomLayout = true });
    }

    private async Task ShowDeleteDialogAsync(CategoryViewModel selectedCategory)
    {
        var parameters = new ModalParameters()
            .Add("ExternalId", selectedCategory.ExternalId)
            .Add("Name", selectedCategory.Name);
        var modalResult = await Modal.Show<DeleteCategoryDialog>(parameters, new ModalOptions { UseCustomLayout = true }).Result;
        if (modalResult.Confirmed)
        {
            var forceDelete = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteCategoryCommand(selectedCategory.Id, forceDelete));
            if (result.IsSuccess)
            {
                _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi xóa danh mục. Vui lòng thử lại sau!"));
            }
        }
    }

    // Events

    private async Task ToolbarClickHandlerAsync(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // CategoryId is combination of Grid's ID and itemname
            case "sfGridCategory_excelexport":
                await CategoryGrid.ExportToExcelAsync();
                break;
            case "sfGridCategory_pdfexport":
                await CategoryGrid.ExportToPdfAsync();
                break;
        }
    }

    private async Task<bool> UpdateCategoryAsync(CategoryViewModel category)
    {
        var result = await Mediator.Send(new UpdateCategoryCommand(category));
        if (category.Image.Status == UploadFileStatus.New)
        {
            await DeleteCategoryImageAsync(category.Id, true);
            category.ImageId = await CreateCategoryImageAsync(category.Id, category.Image);
        }
        return result.IsSuccess;
    }

    private async Task<bool> CreateCategoryAsync(CategoryViewModel category)
    {
        var result = await Mediator.Send(new CreateCategoryCommand(category));
        if (result.IsSuccess)
        {
            await CreateCategoryImageAsync(category.Id, category.Image);
        }
        return result.IsSuccess;
    }

    private async Task<int> CreateCategoryImageAsync(int categoryId, ResourceViewModel image)
    {
        image.CategoryId = categoryId;
        var result = await Mediator.Send(new CreateResourceCommand(image));
        return (int)result.Data!;
    }

    private Task DeleteCategoryImageAsync(int categoryId, bool forceDelete = false)
    {
        return Mediator.Send(new DeleteResourcesByExpressionCommand(x => x.CategoryId == categoryId, forceDelete));
    }
}