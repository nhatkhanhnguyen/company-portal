@using MediatR
@using CompanyPortal.CQRS.Categories.Commands
@using CompanyPortal.CQRS.Categories.Queries
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor
@using CompanyPortal.Core.Extensions

@page "/Administration/Categories"
@inject IMediator Mediator

<div class="row">
    <div class="col-12 d-flex justify-content-between">
        <h3>DANH MỤC</h3>
        <button class="btn btn-primary float-end" @onclick="() => ShowEditDialogAsync(null)">
            <i class="fa-solid fa-plus"></i> THÊM DANH MỤC
        </button>
    </div>
</div>
<hr />

<SfGrid DataSource="@_listCategory" @ref="CategoryGrid" ID="sfGridCategory"
        AllowPaging="true" AllowSelection="true"
        AllowSorting="true" AllowResizing="true"
        EnableStickyHeader="true" EnableHover="true"
        Toolbar="_toolbarItems"
        AllowExcelExport="true" AllowPdfExport="true">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridSearchSettings Fields="@(new[] { "Name", "Description" })"></GridSearchSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="CategoryViewModel">
    </GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(CategoryViewModel.Id)"
                    HeaderText="ID"
                    Width="64">
        </GridColumn>
        <GridColumn Field="@nameof(CategoryViewModel.Name)"
                    HeaderText="TÊN"
                    Width="486"
                    Type="ColumnType.String">
        </GridColumn>
        <GridColumn Field="@nameof(CategoryViewModel.ExternalId)"
                    HeaderText="MÃ"
                    Width="486"
                    Type="ColumnType.String">
        </GridColumn>
        <GridColumn HeaderText="ẨN" TextAlign="TextAlign.Center" Width="50">
            <Template>
                @{
                    var category = context as CategoryViewModel;
                    if (!category!.IsActive)
                    {
                        <i class="fa-solid fa-check"></i>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                @{
                    var category = context as CategoryViewModel;
                    <LoadingButton IconCss="fa-solid fa-eye" ButtonCssClass="btn-info rounded-pill" IsLoading="IsLoading" LoadingText="Đang tải" NormalText="XEM" OnClick="() => ShowViewDialogAsync(category!)" />
                    <LoadingButton IconCss="fa-solid fa-pen-to-square" ButtonCssClass="btn-primary rounded-pill" IsLoading="IsLoading" LoadingText="Đang tải" NormalText="SỬA" OnClick="async () => await ShowEditDialogAsync(category!)" />
                    <LoadingButton IconCss="fa-solid fa-trash" ButtonCssClass="btn-danger rounded-pill" IsLoading="IsLoading" LoadingText="Đang tải" NormalText="XÓA" OnClick="async () => await ShowDeleteDialogAsync(category!)" />
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<style>
    .validation-message {
        font-size: .875em;
        color: red;
    }
</style>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private SfGrid<CategoryViewModel> CategoryGrid { get; set; } = default!;
    private List<CategoryViewModel> _listCategory = [];

    private bool IsLoading = false;

    private readonly List<ItemModel> _toolbarItems =
    [
        new ItemModel { Text = "Xuất Excel", Id = "sfGridCategory_excelexport", PrefixIcon = "fa-solid fa-file-excel" },
    new ItemModel { Text = "Xuất PDF", Id = "sfGridCategory_pdfexport", PrefixIcon = "fa-solid fa-file-pdf" }
    ];

    private readonly List<ToolbarItemModel> _descriptionEditorTools =
    [
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
    new ToolbarItemModel { Command = ToolbarCommand.Italic },
    new ToolbarItemModel { Command = ToolbarCommand.Underline },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.Formats },
    new ToolbarItemModel { Command = ToolbarCommand.Alignments },
    new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
    new ToolbarItemModel { Command = ToolbarCommand.Separator },
    new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
    new ToolbarItemModel { Command = ToolbarCommand.Image },
    new ToolbarItemModel { Command = ToolbarCommand.Video },
    new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
    new ToolbarItemModel { Command = ToolbarCommand.Separator }
    ];

    protected override async Task OnInitializedAsync()
    {
        _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
    }

    private async Task ShowEditDialogAsync(CategoryViewModel? selectedCategory)
    {
        var category = selectedCategory != null ? selectedCategory.Clone() : new CategoryViewModel();
        category.Products = category.Id > 0 ? await Mediator.Send(new GetCategoryProductsByIdQuery(category.Id, true)) : [];

        var parameters = new ModalParameters().Add("Category", category);
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-large"
            };
        var modalResult = await Modal.Show<CreateCategoryDialog>(
            selectedCategory == null ? "THÊM DANH MỤC" : "CHỈNH SỬA DANH MỤC",
            parameters,
            options).Result;
        if (modalResult.Confirmed)
        {
            var data = (CategoryViewModel)modalResult.Data!;
            var result = selectedCategory != null ? await UpdateCategoryAsync(data) : await CreateCategoryAsync(data);
            if (result)
            {
                _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi lưu danh mục!"));
            }
        }
    }

    private async Task ShowViewDialogAsync(CategoryViewModel selectedCategory)
    {
        var products = await Mediator.Send(new GetCategoryProductsByIdQuery(selectedCategory.Id, true));
        selectedCategory.Products = products;
        var options = new ModalOptions
            {
                Size = ModalSize.Custom,
                SizeCustomClass = "blazored-modal-fixed-size-large"
            };
        var parameters = new ModalParameters().Add("Category", selectedCategory);
        Modal.Show<ViewCategoryDialog>("THÔNG TIN DANH MỤC", parameters, options);
    }

    private async Task ShowDeleteDialogAsync(CategoryViewModel selectedCategory)
    {
        var parameters = new ModalParameters().Add("Category", selectedCategory);
        var modalResult = await Modal.Show<DeleteCategoryDialog>("XÓA DANH MỤC", parameters).Result;
        if (modalResult.Confirmed)
        {
            var data = (bool)modalResult.Data!;
            var result = await Mediator.Send(new DeleteCategoryCommand(selectedCategory.Id, data));
            if (result)
            {
                _listCategory = await Mediator.Send(new GetAllCategoriesQuery(true));
            }
            else
            {
                Modal.Show<ErrorDialog>("CÓ LỖI XẢY RA!", new ModalParameters().Add("ErrorMessage", "Có lỗi xảy ra khi xóa danh mục. Vui lòng thử lại sau!"));
            }
        }
    }

    // Events

    private async Task ToolbarClickHandler(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            // CategoryId is combination of Grid's ID and itemname
            case "sfGridCategory_excelexport":
                await CategoryGrid.ExportToExcelAsync();
                break;
            case "sfGridCategory_pdfexport":
                await CategoryGrid.ExportToPdfAsync();
                break;
        }
    }

    private async Task<bool> UpdateCategoryAsync(CategoryViewModel category)
    {
        var result = await Mediator.Send(new UpdateCategoryCommand(category));
        return result.IsSuccess;
    }

    private async Task<bool> CreateCategoryAsync(CategoryViewModel product)
    {
        var result = await Mediator.Send(new CreateCategoryCommand(product));
        return result.IsSuccess;
    }
}