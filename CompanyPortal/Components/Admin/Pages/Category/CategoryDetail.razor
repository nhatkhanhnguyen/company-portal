@using MediatR
@using CompanyPortal.CQRS.Products.Queries
@using CompanyPortal.CQRS.Categories.Commands

@inject IMediator Mediator

<h3>@Category.Name</h3>

@((MarkupString)Category.Description)

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Mã sản phẩm</th>
            <th>Tên sản phẩm</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Category.Products)
        {
            <tr>
                <td>@product.ExternalId</td>
                <td>@product.Name</td>
                <td>
                    <LoadingButton IconCss="fa-solid fa-eye" ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Đang tải" NormalText="Xem" @onclick="() => ShowViewDialogAsync(product.Id)" />
                    <button class="btn btn-sm btn-info" @onclick="() => ShowRemoveProductDialog(product.Id)">
                        <i class="fa-solid fa-xmark"></i> BỎ
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<ModalDialog @ref="@ErrorDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-circle-exclamation"></i> Error occured
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ErrorDialog.Close()"></button>
    </Header>
    <Body>
        <p>@_errorMessage</p>
    </Body>
    <Footer>
        <button class="btn btn-primary float-middle" @onclick="() => ErrorDialog.Close()">OK</button>
    </Footer>
</ModalDialog>

<ModalDialog @ref="@ViewDialog" SizeClass="modal-xl">
    <Header>
        <h5 class="modal-title">Preview</h5>
        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => ViewDialog.Close()"></button>
    </Header>
    <Body>
        <ProductView IsEditing="true" Product="@_selectedProduct" />
    </Body>
</ModalDialog>


<ModalDialog @ref="@RemoveProductDialog">
    <Header>
        <h1 class="modal-title fs-5">
            <i class="fa-solid fa-triangle-exclamation"></i> Gỡ sản phẩm @_selectedProduct.Name!
        </h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => RemoveProductDialog.Close()"></button>
    </Header>
    <Body>
        <p>Bạn có chắc chắn là muốn gỡ sản phẩm @_selectedProduct.Name ra khỏi danh mục này?</p>
    </Body>
    <Footer>
        <LoadingButton ButtonCssClass="btn-primary" IsLoading="_isLoading" LoadingText="Đang lưu" NormalText="Đúng" @onclick="() => RemoveProductAsync(_selectedProduct.Id)" />
        <button class="btn btn-primary float-end me-2" @onclick="() => RemoveProductDialog.Close()">Không</button>
    </Footer>
</ModalDialog>

@code {
    [Parameter] public CategoryViewModel Category { get; set; }

    private ModalDialog ViewDialog { get; set; } = default!;
    private ModalDialog RemoveProductDialog { get; set; } = default!;
    private ModalDialog ErrorDialog { get; set; } = default!;

    private ProductViewModel _selectedProduct = new();
    private string _errorMessage = string.Empty;
    private bool _isLoading;

    private async Task ShowViewDialogAsync(int id)
    {
        _isLoading = true;
        _selectedProduct = Category.Products.First(x => x.Id == id);
        var images = await Mediator.Send(new GetProductImagesByIdQuery(id, true));
        _selectedProduct.Images = images;
        ViewDialog.Open();
        _isLoading = false;
    }

    private void ShowRemoveProductDialog(int id)
    {
        _selectedProduct = Category.Products.First(x => x.Id == id);
        RemoveProductDialog.Open();
    }

    private async Task RemoveProductAsync(int id)
    {
        _isLoading = true;
        var result = await Mediator.Send(new RemoveProductCommand(id));
        if (!result)
        {
            _errorMessage = $"Có lỗi xảy ra khi xóa sản phẩm {_selectedProduct.Name} khỏi danh mục {Category.Name}.";
            ErrorDialog.Open();
        }
        RemoveProductDialog.Close();
        _isLoading = false;
    }
}
