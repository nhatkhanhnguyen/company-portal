@using Microsoft.Net.Http.Headers
@using Microsoft.Identity.Client
@using CompanyPortal.Core.Enum

<div class="row">
    <div class="col-12">
        <div class="input-group custom-file-button">
            <label class="input-group-text" for="@Id">@ButtonText</label>
            <InputFile disable="@Disable"
                       OnChange="OnInputFileChange"
                       id="@Id"
                       class="@($"form-control {ChooseFileButtonCss}")"
                       aria-label="Upload"
                       accept="@AcceptFileExtensions"
                       multiple="@AllowMultiple" />
        </div>
        <div class="table-responsive mt-2 file-uploader-table-container">
            <table class="table table-hover table-striped @TableCss">
                <tbody class="@TableBodyCss align-middle">
                    @foreach (var file in Files)
                    {
                        <FileUploaderTableRow File="@file"
                                              ShowPreview="@ShowPreview"
                                              TableRowCss="@TableRowCss"
                                              TableCellCss="@TableCellCss"
                                              PreviewImageCss="@PreviewImageCss"
                                              RemoveIconCss="@RemoveIconCss"
                                              OnRowRemove="x => RemoveFile(x)" />
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .custom-file-button input[type=file] {
        margin-left: -2px !important;
    }

        .custom-file-button input[type=file]::-webkit-file-upload-button {
            display: none;
        }

        .custom-file-button input[type=file]::file-selector-button {
            display: none;
        }

    .custom-file-button:hover label {
        background-color: #dde0e3;
        cursor: pointer;
    }
</style>

@code {
    [Parameter] public string? AcceptFileExtensions { get; set; }
    [Parameter] public bool AllowMultiple { get; set; } = true;
    [Parameter] public bool Disable { get; set; }
    [Parameter] public bool ShowPreview { get; set; }
    [Parameter] public List<ResourceViewModel> Files { get; set; } = [];

    // Styling properties
    [Parameter] public string Id { get; set; } = "fileUploader";
    [Parameter] public string ButtonText { get; set; } = "Choose Files";
    [Parameter] public string HintText { get; set; } = "No file choosen";
    [Parameter] public string? ChooseFileButtonCss { get; set; }
    [Parameter] public string? TableCss { get; set; }
    [Parameter] public string? TableBodyCss { get; set; }
    [Parameter] public string? TableRowCss { get; set; }
    [Parameter] public string? TableCellCss { get; set; }
    [Parameter] public string? PreviewImageCss { get; set; }
    [Parameter] public string? RemoveIconCss { get; set; } = "fa-solid fa-trash";

    [Parameter] public EventCallback OnFilesSelected { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 5 * 1024 * 2024;
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var stream = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
            var base64 = Convert.ToBase64String(stream.ToArray());
            Files.Add(new ResourceViewModel
                {
                    Base64Content = $"data:{file.ContentType};base64,{base64}",
                    Name = file.Name,
                    Size = file.Size,
                    Status = UploadFileStatus.New,
                    ResourceType = GetResourceTypeByMimeType(file.ContentType)
                });
        }
        await OnFilesSelected.InvokeAsync();
    }

    private ResourceType GetResourceTypeByMimeType(string mimeType)
    {
        switch (mimeType)
        {
            case "application/vnd.ms-excel":
            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                return ResourceType.Excel;
            case "application/msword":
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                return ResourceType.Word;
            case "application/pdf": return ResourceType.Pdf;
            case "image/jpeg":
            case "image/png": return ResourceType.Image;
            default: return ResourceType.Other;
        }
    }

    private void RemoveFile(ResourceViewModel file)
    {
        Files.Remove(file);
    }
}