@using CompanyPortal.Core.Enums

<div class="row">
    <div class="col-12">
        <div class="input-group custom-file-button">
            <label class="input-group-text" for="@Id">@ButtonText</label>
            <InputFile disable="@Disable"
                       OnChange="OnInputFileChangeAsync"
                       id="@Id"
                       class="@($"form-control {ChooseFileButtonCss}")"
                       aria-label="Upload"
                       accept="@AcceptFileExtensions"
                       multiple="@AllowMultiple" />
        </div>
        <div class="table-responsive mt-2 file-uploader-table-container">
            <table class="table @TableCss">
                <tbody class="@TableBodyCss align-middle">
                    @if (AllowMultiple)
                    {
                        @foreach (var file in Files.Where(x => x.Status != UploadFileStatus.Removed))
                        {
                            <tr class="@TableRowCss pd-2">
                                @if (ShowPreview)
                                {
                                    <td class="@TableRowCss p-2 file-uploader-preview-cell">
                                        @switch (file.ResourceType)
                                        {
                                            case ResourceType.Image:
                                                <img src="@(file.Status == UploadFileStatus.Old ? file.Url : file.Base64Content)"
                                                     class="img-fluid rounded w-100 h-auto object-fit-cover file-uploader-preview @PreviewImageCss" alt="Preview @file.Name" />
                                                break;
                                            case ResourceType.Word:
                                                <i class="fa-solid fa-file-word fa-4x"></i>
                                                break;
                                            case ResourceType.Excel:
                                                <i class="fa-solid fa-file-excel fa-4x"></i>
                                                break;
                                            case ResourceType.Pdf:
                                                <i class="fa-solid fa-file-pdf fa-4x"></i>
                                                break;
                                            case ResourceType.Video:
                                                <i class="fa-solid fa-file-video fa-4x"></i>
                                                break;
                                            case ResourceType.Other:
                                            default:
                                                <i class="fa-solid fa-file fa-4x"></i>
                                                break;
                                        }
                                    </td>
                                }
                                <td class="@TableRowCss">
                                    <span class="fw-semibold">@(file.Name.Length > 32 ? file.Name[..32] : file.Name) ...</span>
                                    <br />
                                    <i class="fs-10">Kích thước: @Math.Round(file.Size / 1024, 2) KB</i>
                                </td>
                                <td class="@TableRowCss">
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => file.Status = UploadFileStatus.Removed">
                                        <i class="@RemoveIconCss"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        @if (File != null && File.Status != UploadFileStatus.Removed)
                        {
                            <tr class="@TableRowCss pd-2">
                                @if (ShowPreview)
                                {
                                    <td class="@TableRowCss p-2 file-uploader-preview-cell">
                                        @switch (File.ResourceType)
                                        {
                                            case ResourceType.Image:
                                                <img src="@(File.Status == UploadFileStatus.Old ? File.Url : File.Base64Content)"
                                                     class="img-fluid rounded w-100 h-auto object-fit-cover file-uploader-preview @PreviewImageCss" alt="Preview @File.Name" />
                                                break;
                                            case ResourceType.Word:
                                                <i class="fa-solid fa-file-word fa-4x"></i>
                                                break;
                                            case ResourceType.Excel:
                                                <i class="fa-solid fa-file-excel fa-4x"></i>
                                                break;
                                            case ResourceType.Pdf:
                                                <i class="fa-solid fa-file-pdf fa-4x"></i>
                                                break;
                                            case ResourceType.Video:
                                                <i class="fa-solid fa-file-video fa-4x"></i>
                                                break;
                                            case ResourceType.Other:
                                            default:
                                                <i class="fa-solid fa-file fa-4x"></i>
                                                break;
                                        }
                                    </td>
                                }
                                <td class="@TableRowCss">
                                    <span class="fw-semibold">@(File.Name.Length > 32 ? File.Name[..32] : File.Name) ...</span>
                                    <br />
                                    <i class="fs-10">Kích thước: @Math.Round(File.Size / 1024, 2) KB</i>
                                </td>
                                <td class="@TableRowCss">
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => File.Status = UploadFileStatus.Removed">
                                        <i class="@RemoveIconCss"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .custom-file-button input[type=file] {
        margin-left: -2px !important;
    }

        .custom-file-button input[type=file]::-webkit-file-upload-button {
            display: none;
        }

        .custom-file-button input[type=file]::file-selector-button {
            display: none;
        }

    .custom-file-button:hover label {
        background-color: #dde0e3;
        cursor: pointer;
    }
</style>

@code {
    [Parameter] public string? AcceptFileExtensions { get; set; }
    [Parameter] public bool AllowMultiple { get; set; } = true;
    [Parameter] public bool Disable { get; set; }
    [Parameter] public bool ShowPreview { get; set; }

    [Parameter] public List<ResourceViewModel> Files { get; set; } = [];
    [Parameter] public EventCallback<List<ResourceViewModel>> FilesChanged { get; set; }

    [Parameter] public ResourceViewModel? File { get; set; }
    [Parameter] public EventCallback<ResourceViewModel> FileChanged { get; set; }

    // Styling properties
    [Parameter] public string Id { get; set; } = "fileUploader";
    [Parameter] public string ButtonText { get; set; } = "Choose Files";
    [Parameter] public string? ChooseFileButtonCss { get; set; }
    [Parameter] public string? TableCss { get; set; }
    [Parameter] public string? TableBodyCss { get; set; }
    [Parameter] public string? TableRowCss { get; set; }
    [Parameter] public string? TableCellCss { get; set; }
    [Parameter] public string? PreviewImageCss { get; set; }
    [Parameter] public string? RemoveIconCss { get; set; } = "fa-solid fa-trash";

    [Parameter] public EventCallback OnFilesSelected { get; set; }

    private async Task OnInputFileChangeAsync(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (!AllowMultiple)
        {
            var file = files.First();
            File = await GenerateResourceFromFileAsync(file);
            await FileChanged.InvokeAsync(File);
        }
        else
        {
            foreach (var file in files)
            {
                Files.Add(await GenerateResourceFromFileAsync(file));
            }
            await FilesChanged.InvokeAsync(Files);
        }

        await OnFilesSelected.InvokeAsync();
    }

    private async Task<ResourceViewModel> GenerateResourceFromFileAsync(IBrowserFile file)
    {
        const long maxFileSize = 5 * 1024 * 2024;
        var stream = new MemoryStream();
        await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
        var base64 = Convert.ToBase64String(stream.ToArray());
        return new ResourceViewModel
        {
            Base64Content = $"data:{file.ContentType};base64,{base64}",
            Name = file.Name,
            Size = file.Size,
            Status = UploadFileStatus.New,
            ResourceType = GetResourceTypeByMimeType(file.ContentType)
        };
    }

    private ResourceType GetResourceTypeByMimeType(string mimeType)
    {
        return mimeType switch
        {
            "application/vnd.ms-excel" or "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" => ResourceType.Excel,
            "application/msword" or "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => ResourceType.Word,
            "application/pdf" => ResourceType.Pdf,
            "image/jpeg" or "image/png" => ResourceType.Image,
            _ => ResourceType.Other
        };
    }
}